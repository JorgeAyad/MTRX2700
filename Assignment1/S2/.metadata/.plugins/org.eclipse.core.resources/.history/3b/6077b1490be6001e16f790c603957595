.syntax unified
.thumb

#include "Decoding.s"
#include "definitions.s"
#include "initialise.s"
#include "delay.s"

.global main


.data
outputstring: .asciz "abb"
string_length: .byte 3
.align
@ can allocate as an array
@incoming_buffer: .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
@ or allocate just as a block of space with this number of bytes
incoming_buffer: .space 62

@ One strategy is to keep a variable that lets you know the size of the buffer.
incoming_counter: .byte 62

.text
.global main

main:
	BL initialise_power
	BL enable_peripheral_clocks
	BL enable_uart
    BL initialise_discovery_board

	@ To read in data, we need to use a memory buffer to store the incoming bytes
	@ Get pointers to the buffer and counter memory areas
	LDR R6, =incoming_buffer
	LDR R7, =incoming_counter

	@ dereference the memory for the maximum buffer size, store it in R7
	LDRB R7, [R7]

	@ Keep a pointer that counts how many bytes have been received
	MOV R8, #0x00

	@BL Decoding // This Branches to the Decoding File Which Decodes the String Received from the Receive function
	@B Recieving
	B Counting_Letters

@Recieving:
	@LDR R0, =UART @ the base address for the register to set up UART
	@LDR R1, [R0, USART_ISR] @ load the status of the UART

	@TST R1, 1 << UART_ORE | 1 << UART_FE  @ 'AND' the current status with the bit mask that we are interested in
						   @ NOTE, the ANDS is used so that if the result is '0' the z register flag is set

	@BNE clear_error

	@TST R1, 1 << UART_RXNE
@PAUSE THEN SEND THEN UNPAUSE IT IS IN RAM
	@BNE Recieving @ loop back to check status again if the flag indicates there is no byte waiting

	@LDRB R3, [R0, USART_RDR] @ load the lowest byte (RDR bits [0:7] for an 8 bit read)
	@STRB R3, [R6, R8]
	@ADD R8, #1

	@CMP R7, R8
	@BGT no_reset
	@MOV R8, #0

@no_reset:

	@ load the status of the UART
	@LDR R1, [R0, USART_RQR]
	@ORR R1, 1 << UART_RXFRQ
	@STR R1, [R0, USART_RQR]
	@BGT Recieving


@clear_error:

	@ Clear the overrun/frame error flag in the register USART_ICR (see page 897)
	@LDR R1, [R0, USART_ICR]
	@ORR R1, 1 << UART_ORECF | 1 << UART_FECF @ clear the flags (by setting flags to 1)
	@STR R1, [R0, USART_ICR]
	@B Recieving


Counting_Letters:

    MOV R4, #0              // Load LED pattern into a register
    LDRB R5, =0b00000001

    MOV R9, #ASCII_LOWERCASE_A // will be the comparison register
	LDR R2, =outputstring
	LDR R12, =string_length
	MOV R11, #0
    B Counting_Loop


Counting_Loop:

	CMP R11, R12
	BEQ End_Program
	LDRB R8, [R2], #1
	CMP R8, #0             // Check for null terminator
    BEQ End_Of_Word              // If null terminator found, end loop

	CMP R8, R9
	BEQ LED_Counter

    B Counting_Loop

LED_Counter:
	ORR R4, R4, R5 // Set the LED pattern
    LSL R5, R5, #0x01
    B Counting_Loop


End_Of_Word:
	ADD R11, R11, #1
	STRB R4, [R0, #ODR + 1]     // Save the LED pattern
	BL delay
	CMP R9, #ASCII_LOWERCASE_Z
	BEQ End_Program
    MOV R9, #ASCII_LOWERCASE_A + 1 //
    LDRB R5, =0b00000001 // reset comparison bit
    SUB R2, R2, #3
    MOV R4, #0
	STRB R4, [R0, #ODR + 1]
	BL delay
    B Counting_Loop


End_Program:

	B .




