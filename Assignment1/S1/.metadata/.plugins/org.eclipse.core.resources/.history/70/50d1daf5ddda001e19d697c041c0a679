.syntax unified
.thumb

.global main

.data
inputString: .asciz "ABCDE" // Input string
outputString: .space BUFFER_SIZE      // Defining an output string buffer
encoded_alphabet: .byte 'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'
decoded_alphabet: .byte 'J', 'U', 'K', 'W','D','Q','F','A','P','O','E','N','C','Z','X','G','Y','V','R','M','L','I','S','H','T'


.equ BUFFER_SIZE, 32
.equ ASCII_UPPERCASE_A, 65 // Defining Variables for the ASCII bounds
.equ ASCII_UPPERCASE_Z, 90
.equ ASCII_LOWERCASE_A, 97
.equ ASCII_LOWERCASE_Z, 122
.equ CONVERT_DIFFERENCE, 0
.equ MODE, 1

.text


main:
    // Initialize variables
    LDR R1, =inputString   // Load address of the input string
    LDR R2, =outputString  // Load address of the output string
	LDR R3, =encoded_alphabet // Load address of the encoded_alphabet
	LDR R4, =decoded_alphabet // Load address of the decoded_alphabet
loop:
    LDRB R5, [R1], #1      // Load byte from input string, increment pointer
    CMP R5, #0             // Check for null terminator
    BEQ end                // If null terminator found, end loop

	CMP R5, #ASCII_UPPERCASE_A // Check if character is uppercase
    BLT store_char // Not uppercase
    CMP R5, #ASCII_UPPERCASE_Z //check if character is within bound of Uppercase
    BGT check_lowercase// check for lowercase

    //check for what mode it is
    LDR R6, =MODE
    BEQ Encode

Encode:
 	LDR R7, =0
 	LDRB R8, [R3], R7
 	LDR R8, [R8]
 	CMP R5, R7
 	BEQ Code_Process
 	ADD R7, R7, #1
 	B Encode

Code_Process:
	LDR R5, [R4, R6]
	B store_char


check_lowercase:
    CMP R5, #ASCII_LOWERCASE_A // Check if character is lowercase
    BLT store_char
    CMP R5, #ASCII_LOWERCASE_Z
    BGT store_char



store_char:
	STRB R5, [R1], #1      // Store byte into output string and increments pointer
    B loop                 // Repeating the overall loop

end:
    MOV R2, #0             // Null terminate output string to end the program
    STRB R2, [R1]

    // End program
    B .
