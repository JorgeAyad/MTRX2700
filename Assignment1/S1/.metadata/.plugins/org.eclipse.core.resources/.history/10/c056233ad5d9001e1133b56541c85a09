.syntax unified
.thumb

.global main

.data
inputString:  .asciz "abcde" // Input string
outputString: .space BUFFER_SIZE      // Defining an output string buffer

.equ BUFFER_SIZE, 32
.equ ASCII_UPPERCASE_A, 65 // Defining Variables for the ASCII bounds
.equ ASCII_UPPERCASE_Z, 90
.equ ASCII_LOWERCASE_A, 97
.equ ASCII_LOWERCASE_Z, 122
.equ CONVERT_DIFFERENCE, 3

.text


main:
    // Initialize variables
    LDR R0, =inputString   // Load address of the input string
    LDR R1, =outputString  // Load address of the output string

loop:
    LDRB R2, [R0], #1      // Load byte from input string, increment pointer
    CMP R2, #0             // Check for null terminator
    BEQ end                // If null terminator found, end loop

    CMP R2, #ASCII_UPPERCASE_A // Check if character is uppercase
    BLT store_char // Not uppercase
    CMP R2, #ASCII_UPPERCASE_Z //check if character is within bound of Uppercase
    BGT check_lowercase// check for lowercase
    CMP R2, #ASCII_LOWERCASE_A


    SUB R3, R2, #ASCII_UPPERCASE_A // checking if new ascii value is outside bounds
	CMP R3, #CONVERT_DIFFERENCE //finding whether the caeser cipher needs to wrap around
	BGE Caeser_Cipher_no_bound_C // no wrapping
	CMP R3, #CONVERT_DIFFERENCE
	BLE Caeser_Cipher_bounded_C //wrapping

Caeser_Cipher_bounded_C:
	SUB R4, R3, #CONVERT_DIFFERENCE //finding how much it needs to carry
	ADD R4, R4, #1
	ADD R2, R4, #ASCII_UPPERCASE_Z //performing caeser cipher
	B store_char

Caeser_Cipher_no_bound_C:
	SUB R2, R2, #CONVERT_DIFFERENCE
	B store_char

check_lowercase:
    CMP R2, #ASCII_LOWERCASE_A // Check if character is lowercase
    BLT store_char
    CMP R2, #ASCII_LOWERCASE_Z
    BGT store_char

    SUB R3, R2, #ASCII_LOWERCASE_A // checking if new ascii value is outside bounds
	CMP R3, #CONVERT_DIFFERENCE //finding whether the caeser cipher needs to wrap around
	BGE Caeser_Cipher_no_bound_L // no wrapping
	CMP R3, #CONVERT_DIFFERENCE
	BLE Caeser_Cipher_bounded_L //wrapping

Caeser_Cipher_bounded_L:
	SUB R4, R3, #CONVERT_DIFFERENCE //finding how much it needs to carry
	ADD R4, R4, #1
	ADD R2, R4, #ASCII_LOWERCASE_Z //performing caeser cipher
	B store_char

Caeser_Cipher_no_bound_L:
	SUB R2, R2, #CONVERT_DIFFERENCE
	B store_char


store_char:
    STRB R2, [R1], #1      // Store byte into output string and increments pointer
    B loop                 // Repeating the overall loop

end:
    MOV R2, #0             // Null terminate output string to end the program
    STRB R2, [R1]

    // End program
    B .
