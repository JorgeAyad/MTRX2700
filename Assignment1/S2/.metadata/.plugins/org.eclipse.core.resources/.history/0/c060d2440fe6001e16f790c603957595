.syntax unified
.thumb

#include "Decoding.s"
#include "definitions.s"
#include "initialise.s"
#include "delay.s"

.global main


.data
inputstring: .asciz "jjuu"
outputString: .space BUFFER_SIZE      // Defining an output string buffer
encoded_alphabet: .byte 'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'
decoded_alphabet: .byte 'J', 'U', 'K', 'W','D','Q','F','A','P','O','E','N','C','Z','X','G','Y','V','R','M','L','I','S','H','T'
string_length: .byte 3
.align
@ can allocate as an array
@incoming_buffer: .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
@ or allocate just as a block of space with this number of bytes
incoming_buffer: .space 62

@ One strategy is to keep a variable that lets you know the size of the buffer.
incoming_counter: .byte 62

.text
.global main

main:
	BL initialise_power
	BL enable_peripheral_clocks
	BL enable_uart
    BL initialise_discovery_board

	@ To read in data, we need to use a memory buffer to store the incoming bytes
	@ Get pointers to the buffer and counter memory areas
	LDR R6, =incoming_buffer
	LDR R7, =incoming_counter

	@ dereference the memory for the maximum buffer size, store it in R7
	LDRB R7, [R7]

	@ Keep a pointer that counts how many bytes have been received
	MOV R8, #0x00

	BL Decoding // This Branches to the Decoding File Which Decodes the String Received from the Receive function
	@B Recieving
	B Counting_Letters

@Recieving:
	@LDR R0, =UART @ the base address for the register to set up UART
	@LDR R1, [R0, USART_ISR] @ load the status of the UART

	@TST R1, 1 << UART_ORE | 1 << UART_FE  @ 'AND' the current status with the bit mask that we are interested in
						   @ NOTE, the ANDS is used so that if the result is '0' the z register flag is set

	@BNE clear_error

	@TST R1, 1 << UART_RXNE
@PAUSE THEN SEND THEN UNPAUSE IT IS IN RAM
	@BNE Recieving @ loop back to check status again if the flag indicates there is no byte waiting

	@LDRB R3, [R0, USART_RDR] @ load the lowest byte (RDR bits [0:7] for an 8 bit read)
	@STRB R3, [R6, R8]
	@ADD R8, #1

	@CMP R7, R8
	@BGT no_reset
	@MOV R8, #0

@no_reset:

	@ load the status of the UART
	@LDR R1, [R0, USART_RQR]
	@ORR R1, 1 << UART_RXFRQ
	@STR R1, [R0, USART_RQR]
	@BGT Recieving


@clear_error:

	@ Clear the overrun/frame error flag in the register USART_ICR (see page 897)
	@LDR R1, [R0, USART_ICR]
	@ORR R1, 1 << UART_ORECF | 1 << UART_FECF @ clear the flags (by setting flags to 1)
	@STR R1, [R0, USART_ICR]
	@B Recieving

Decoding:

    // Initialize variables
    LDR R1, =inputstring   // Load address of the input string
    LDR R2, =outputString  // Load address of the output string
	LDR R3, =encoded_alphabet // Load address of the encoded_alphabet
	LDR R4, =decoded_alphabet // Load address of the decoded_alphabet
loop:
    LDRB R5, [R1], #1      // Load byte from input string, increment pointer
    CMP R5, #0             // Check for null terminator
    BEQ end                // If null terminator found, end loop

	CMP R5, #ASCII_UPPERCASE_A // Check if character is uppercase
    BLT Store_Char // Not uppercase
    CMP R5, #ASCII_UPPERCASE_Z //check if character is within bound of Uppercase
    BGT Check_Lowercase// check for lowercase


   	B Decode

Decode:
	LDR R7, =0
	MOV R8, R5
Decode_Loop:
	LDRB R9, [R4, R7]
	CMP R8, R9
	BEQ Decode_Code
	ADD R7, R7, #1
	CMP R7, #26
	BNE Decode_Loop
	B Store_Char

Decode_Code:
	ADD R5, R3, R7
	LDRB R5, [R5]
	B Store_Char


Check_Lowercase:
    CMP R5, #ASCII_LOWERCASE_A // Check if character is lowercase
    BLT Store_Char
    CMP R5, #ASCII_LOWERCASE_Z
    BGT Store_Char

   	B Decode_L


Code_Found_L:
    ADD R5, R4, R7
    LDRB R5, [R5]
     ADD R5, R5, #32        // Load the decoded character
    B Store_Char         // Store the decoded character and continue

Decode_L:
    LDR R7, =0
    MOV R8, R5
    SUB R8, R8, #32
Decode_Loop_L:
    LDRB R9, [R4, R7]
    CMP R8, R9
    BEQ Decode_Code_L
    ADD R7, R7, #1
    CMP R7, #25
    BNE Decode_Loop_L
    B Store_Char

Decode_Code_L:
    ADD R5, R3, R7
    LDRB R5, [R5]
    ADD R5, R5, #32
    B Store_Char


Store_Char:
	STRB R5, [R2], #1      // Store byte into output string and increments pointer
    B loop                 // Repeating the overall loop

End_Of_Cipher:
    MOV R2, #0             // Null terminate output string to end the program
    STRB R2, [R1]

	@ R2 has the decoded string for the program

	BX LR

Counting_Letters:

    MOV R4, #0              // Load LED pattern into a register
    LDRB R5, =0b00000001

    MOV R9, #ASCII_LOWERCASE_A // will be the comparison register
	LDR R2, =outputString
	LDR R6, =string_length
	MOV R12, #0
	MOV R11, #0
    B Counting_Loop


Counting_Loop:
	ADD R12, R12, #1 @keeping track of word length
	CMP R11, R5
	BEQ End_Program
	LDRB R8, [R2], #1
	CMP R8, #0             // Check for null terminator
    BEQ End_Of_Word              // If null terminator found, end loop

	CMP R8, R9
	BEQ LED_Counter

    B Counting_Loop

LED_Counter:
	ORR R4, R4, R5 // Set the LED pattern
    LSL R5, R5, #0x01
    B Counting_Loop


End_Of_Word:
	ADD R11, R11, #1
	STRB R4, [R0, #ODR + 1]     // Save the LED pattern
	BL delay
	CMP R9, #ASCII_LOWERCASE_Z
	BEQ End_Program
    MOV R9, #ASCII_LOWERCASE_A + 1 //
    LDRB R5, =0b00000001 // reset comparison bit
    SUB R2, R2, R12
    LDRB R4, =0b00000000
    B Reset
Reset:
	STRB R4, [R0, #ODR + 1]
	BL delay
    B Counting_Loop


End_Program:

	B .




