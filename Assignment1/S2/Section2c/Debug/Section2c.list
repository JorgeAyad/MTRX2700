
Section2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000184  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000318  08000320  00010320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000318  08000318  00010320  2**0
                  CONTENTS
  4 .ARM          00000000  08000318  08000318  00010320  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000318  08000320  00010320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000318  08000318  00010318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800031c  0800031c  0001031c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010320  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010320  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00010350  2**0
                  CONTENTS, READONLY
 14 .debug_line   00000102  00000000  00000000  00010393  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line_str 00000084  00000000  00000000  00010495  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_info   00000048  00000000  00000000  00010519  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00000026  00000000  00000000  00010561  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00000048  00000000  00000000  00010588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000008b  00000000  00000000  000105d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00000019  00000000  00000000  0001065b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000002c  00000000  00000000  00010674  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000300 	.word	0x08000300

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000300 	.word	0x08000300

080001d4 <enable_peripheral_clocks>:

#include "definitions.s"

@ enable the clocks for peripherals (GPIOA, C and E)
enable_peripheral_clocks:
	LDR R0, =RCC  @ load the address of the RCC address boundary (for enabling the IO clock)
 80001d4:	4821      	ldr	r0, [pc, #132]	; (800025c <Change_Mode_Ascending+0x8>)
	LDR R1, [R0, #AHBENR]  @ load the current value of the peripheral clock registers
 80001d6:	6941      	ldr	r1, [r0, #20]
	ORR R1, 1 << GPIOA_ENABLE | 1 << GPIOC_ENABLE | 1 << GPIOE_ENABLE  @ 21st bit is enable GPIOE clock, 17 is GPIOA clock
 80001d8:	f441 1128 	orr.w	r1, r1, #2752512	; 0x2a0000
	STR R1, [R0, #AHBENR]  @ store the modified register back to the submodule
 80001dc:	6141      	str	r1, [r0, #20]
	BX LR @ return from function call
 80001de:	4770      	bx	lr

080001e0 <initialise_discovery_board>:



@ initialise the discovery board I/O (just outputs: inputs are selected by default)
initialise_discovery_board:
	LDR R0, =GPIOE 	@ load the address of the GPIOE register into R0
 80001e0:	481f      	ldr	r0, [pc, #124]	; (8000260 <Change_Mode_Ascending+0xc>)
	LDR R1, =0x5555  @ load the binary value of 01 (OUTPUT) for each port in the upper two bytes
 80001e2:	f245 5155 	movw	r1, #21845	; 0x5555
					 @ as 0x5555 = 01010101 01010101
	STRH R1, [R0, #MODER + 2]   @ store the new register values in the top half word representing
 80001e6:	8041      	strh	r1, [r0, #2]
								@ the MODER settings for pe8-15
	BX LR @ return from function call
 80001e8:	4770      	bx	lr

080001ea <main>:

.equ MODE, 0 //dictates which direction to go

main:
    // Button enable (input)
    LDR R2, =GPIOA         // Loading port A address into R0 register
 80001ea:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
    LDRB R3, [R0, #MODER]  // Loading the byte from GPIOA MODER (offset 0x00)
 80001ee:	7803      	ldrb	r3, [r0, #0]
    AND R3, #0b11111100    // Bitmasking to change only the last two bits (bits 0 and 1)
 80001f0:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
    STRB R3, [R2, #MODER]  // Save back to GPIOA MODER
 80001f4:	7013      	strb	r3, [r2, #0]

    BL enable_peripheral_clocks
 80001f6:	f7ff ffed 	bl	80001d4 <enable_peripheral_clocks>
    BL initialise_discovery_board
 80001fa:	f7ff fff1 	bl	80001e0 <initialise_discovery_board>
    MOV R4, #0              // Load LED pattern into a register
 80001fe:	f04f 0400 	mov.w	r4, #0
    MOV R8, #MODE
 8000202:	f04f 0800 	mov.w	r8, #0
    LDRB R5, =0b00000001
 8000206:	f04f 0501 	mov.w	r5, #1
    B loop
 800020a:	e7ff      	b.n	800020c <loop>

0800020c <loop>:

loop:
	BL Mode_Change
 800020c:	f000 f805 	bl	800021a <Mode_Change>

    LDRB R6, [R2, #IDR]    // Read the input from GPIOA IDR
 8000210:	7c16      	ldrb	r6, [r2, #16]
    ANDS R6, #0x01          // Check if button is on
 8000212:	f016 0601 	ands.w	r6, r6, #1
    BNE Button_Pressed      // Branch if button is pressed
 8000216:	d104      	bne.n	8000222 <Button_Pressed>
    B loop
 8000218:	e7f8      	b.n	800020c <loop>

0800021a <Mode_Change>:

Mode_Change:
	CMP R4, #0
 800021a:	2c00      	cmp	r4, #0
	BEQ Change_Mode_Ascending
 800021c:	d01a      	beq.n	8000254 <Change_Mode_Ascending>

	CMP R4, 0b11111111
 800021e:	2cff      	cmp	r4, #255	; 0xff
	BEQ Change_Mode_Descending
 8000220:	d015      	beq.n	800024e <Change_Mode_Descending>

08000222 <Button_Pressed>:


Button_Pressed:

	CMP R8, #0
 8000222:	f1b8 0f00 	cmp.w	r8, #0
	BEQ button_pressed_ascending
 8000226:	d000      	beq.n	800022a <button_pressed_ascending>
	B button_pressed_descending
 8000228:	e005      	b.n	8000236 <button_pressed_descending>

0800022a <button_pressed_ascending>:

button_pressed_ascending:

    ORR R4, R4, R5 // Set the LED pattern
 800022a:	ea44 0405 	orr.w	r4, r4, r5
    LSL R5, R5, #0x01
 800022e:	ea4f 0545 	mov.w	r5, r5, lsl #1

    STRB R4, [R0, #ODR + 1]     // Save the LED pattern
 8000232:	7544      	strb	r4, [r0, #21]
    B loop
 8000234:	e7ea      	b.n	800020c <loop>

08000236 <button_pressed_descending>:

button_pressed_descending:
	LSR R5, R5, #0x01
 8000236:	ea4f 0555 	mov.w	r5, r5, lsr #1
	EOR R4, R4, R5
 800023a:	ea84 0405 	eor.w	r4, r4, r5
	STRB R4, [R0, #ODR + 1]
 800023e:	7544      	strb	r4, [r0, #21]
	CMP R4, 0b100000000
 8000240:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
	BEQ Reset_LEDs
 8000244:	d000      	beq.n	8000248 <Reset_LEDs>
	B loop
 8000246:	e7e1      	b.n	800020c <loop>

08000248 <Reset_LEDs>:

Reset_LEDs:
	MOV R4, #0
 8000248:	f04f 0400 	mov.w	r4, #0
	B button_pressed_descending
 800024c:	e7f3      	b.n	8000236 <button_pressed_descending>

0800024e <Change_Mode_Descending>:

Change_Mode_Descending:
	MOV R8, #1
 800024e:	f04f 0801 	mov.w	r8, #1
	BX LR
 8000252:	4770      	bx	lr

08000254 <Change_Mode_Ascending>:

Change_Mode_Ascending:
	MOV R8, #0
 8000254:	f04f 0800 	mov.w	r8, #0
	BX LR
 8000258:	4770      	bx	lr
 800025a:	0000      	.short	0x0000
	LDR R0, =RCC  @ load the address of the RCC address boundary (for enabling the IO clock)
 800025c:	40021000 	.word	0x40021000
	LDR R0, =GPIOE 	@ load the address of the GPIOE register into R0
 8000260:	48001000 	.word	0x48001000

08000264 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000264:	480d      	ldr	r0, [pc, #52]	; (800029c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000266:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000268:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800026c:	480c      	ldr	r0, [pc, #48]	; (80002a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800026e:	490d      	ldr	r1, [pc, #52]	; (80002a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000270:	4a0d      	ldr	r2, [pc, #52]	; (80002a8 <LoopForever+0xe>)
  movs r3, #0
 8000272:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000274:	e002      	b.n	800027c <LoopCopyDataInit>

08000276 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000276:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000278:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800027a:	3304      	adds	r3, #4

0800027c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800027c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800027e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000280:	d3f9      	bcc.n	8000276 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000282:	4a0a      	ldr	r2, [pc, #40]	; (80002ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000284:	4c0a      	ldr	r4, [pc, #40]	; (80002b0 <LoopForever+0x16>)
  movs r3, #0
 8000286:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000288:	e001      	b.n	800028e <LoopFillZerobss>

0800028a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800028a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800028c:	3204      	adds	r2, #4

0800028e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800028e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000290:	d3fb      	bcc.n	800028a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000292:	f000 f811 	bl	80002b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000296:	f7ff ffa8 	bl	80001ea <main>

0800029a <LoopForever>:

LoopForever:
  b LoopForever
 800029a:	e7fe      	b.n	800029a <LoopForever>
  ldr   r0, =_estack
 800029c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80002a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002a4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002a8:	08000320 	.word	0x08000320
  ldr r2, =_sbss
 80002ac:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002b0:	2000001c 	.word	0x2000001c

080002b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002b4:	e7fe      	b.n	80002b4 <ADC1_2_IRQHandler>
	...

080002b8 <__libc_init_array>:
 80002b8:	b570      	push	{r4, r5, r6, lr}
 80002ba:	4d0d      	ldr	r5, [pc, #52]	; (80002f0 <__libc_init_array+0x38>)
 80002bc:	4c0d      	ldr	r4, [pc, #52]	; (80002f4 <__libc_init_array+0x3c>)
 80002be:	1b64      	subs	r4, r4, r5
 80002c0:	10a4      	asrs	r4, r4, #2
 80002c2:	2600      	movs	r6, #0
 80002c4:	42a6      	cmp	r6, r4
 80002c6:	d109      	bne.n	80002dc <__libc_init_array+0x24>
 80002c8:	4d0b      	ldr	r5, [pc, #44]	; (80002f8 <__libc_init_array+0x40>)
 80002ca:	4c0c      	ldr	r4, [pc, #48]	; (80002fc <__libc_init_array+0x44>)
 80002cc:	f000 f818 	bl	8000300 <_init>
 80002d0:	1b64      	subs	r4, r4, r5
 80002d2:	10a4      	asrs	r4, r4, #2
 80002d4:	2600      	movs	r6, #0
 80002d6:	42a6      	cmp	r6, r4
 80002d8:	d105      	bne.n	80002e6 <__libc_init_array+0x2e>
 80002da:	bd70      	pop	{r4, r5, r6, pc}
 80002dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80002e0:	4798      	blx	r3
 80002e2:	3601      	adds	r6, #1
 80002e4:	e7ee      	b.n	80002c4 <__libc_init_array+0xc>
 80002e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80002ea:	4798      	blx	r3
 80002ec:	3601      	adds	r6, #1
 80002ee:	e7f2      	b.n	80002d6 <__libc_init_array+0x1e>
 80002f0:	08000318 	.word	0x08000318
 80002f4:	08000318 	.word	0x08000318
 80002f8:	08000318 	.word	0x08000318
 80002fc:	0800031c 	.word	0x0800031c

08000300 <_init>:
 8000300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000302:	bf00      	nop
 8000304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000306:	bc08      	pop	{r3}
 8000308:	469e      	mov	lr, r3
 800030a:	4770      	bx	lr

0800030c <_fini>:
 800030c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800030e:	bf00      	nop
 8000310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000312:	bc08      	pop	{r3}
 8000314:	469e      	mov	lr, r3
 8000316:	4770      	bx	lr
