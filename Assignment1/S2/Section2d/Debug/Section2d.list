
Section2d.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001e4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000378  08000378  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000378  08000378  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000378  08000378  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000378  08000378  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000378  08000378  00010378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800037c  0800037c  0001037c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000380  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          0000001c  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00020004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 14 .debug_line   00000136  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line_str 0000008c  00000000  00000000  000201ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_info   00000048  00000000  00000000  00020239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00000026  00000000  00000000  00020281  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00000048  00000000  00000000  000202a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000008b  00000000  00000000  000202f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00000019  00000000  00000000  0002037b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000002c  00000000  00000000  00020394  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000360 	.word	0x08000360

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	08000360 	.word	0x08000360

080001d4 <enable_peripheral_clocks>:

#include "definitions.s"

@ enable the clocks for peripherals (GPIOA, C and E)
enable_peripheral_clocks:
	LDR R0, =RCC  @ load the address of the RCC address boundary (for enabling the IO clock)
 80001d4:	4834      	ldr	r0, [pc, #208]	; (80002a8 <end+0x6>)
	LDR R1, [R0, #AHBENR]  @ load the current value of the peripheral clock registers
 80001d6:	6941      	ldr	r1, [r0, #20]
	ORR R1, 1 << GPIOA_ENABLE | 1 << GPIOC_ENABLE | 1 << GPIOE_ENABLE  @ 21st bit is enable GPIOE clock, 17 is GPIOA clock
 80001d8:	f441 1128 	orr.w	r1, r1, #2752512	; 0x2a0000
	STR R1, [R0, #AHBENR]  @ store the modified register back to the submodule
 80001dc:	6141      	str	r1, [r0, #20]
	BX LR @ return from function call
 80001de:	4770      	bx	lr

080001e0 <initialise_discovery_board>:



@ initialise the discovery board I/O (just outputs: inputs are selected by default)
initialise_discovery_board:
	LDR R0, =GPIOE 	@ load the address of the GPIOE register into R0
 80001e0:	4832      	ldr	r0, [pc, #200]	; (80002ac <end+0xa>)
	LDR R1, =0x5555  @ load the binary value of 01 (OUTPUT) for each port in the upper two bytes
 80001e2:	f245 5155 	movw	r1, #21845	; 0x5555
					 @ as 0x5555 = 01010101 01010101
	STRH R1, [R0, #MODER + 2]   @ store the new register values in the top half word representing
 80001e6:	8041      	strh	r1, [r0, #2]
								@ the MODER settings for pe8-15
	BX LR @ return from function call
 80001e8:	4770      	bx	lr

080001ea <value>:
 80001ea:	b3ff      	.short	0xb3ff
 80001ec:	04c4      	.short	0x04c4

080001ee <delay>:
.equ TIM2_ARR, 0x4000002C        // Timer auto-reload register address
.equ TIM2_SR, 0x40000010         // Timer status register address
value: .word 79999999

delay:
    PUSH {LR}             // Save link register
 80001ee:	b500      	push	{lr}

    // Enable clock for Timer 2
    LDR R0, =RCC_APB1ENR
 80001f0:	482f      	ldr	r0, [pc, #188]	; (80002b0 <end+0xe>)
    LDR R1, [R0]
 80001f2:	6801      	ldr	r1, [r0, #0]
    ORR R1, R1, #(1 << 0)  // Set bit 0 to enable TIM2 clock
 80001f4:	f041 0101 	orr.w	r1, r1, #1
    STR R1, [R0]
 80001f8:	6001      	str	r1, [r0, #0]

    // Configure Timer 2
    LDR R0, =TIM2_CR1      // Load address of TIM2_CR1
 80001fa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    MOV R1, #0             // Clear all bits
 80001fe:	f04f 0100 	mov.w	r1, #0
    STR R1, [R0]           // Store back to CR1
 8000202:	6001      	str	r1, [r0, #0]

    // Set prescaler for desired clock frequency
    LDR R0, =TIM2_PSC
 8000204:	482b      	ldr	r0, [pc, #172]	; (80002b4 <end+0x12>)
    //For 500ms second
    LDR R1, =3999           // Setting the Prescaler, remeber that at zero, default is 1.
 8000206:	f640 719f 	movw	r1, #3999	; 0xf9f
    //LDR R1, #799999999
    //For 0.1ms or 100 microseconds the prescaler will be 79,999,999
    //LDR R3, #value
    //LDR R1, [R3]

    STR R1, [R0]
 800020a:	6001      	str	r1, [r0, #0]

    // Calculate the ARR value for the desired delay time
    LDR R0, =TIM2_ARR
 800020c:	482a      	ldr	r0, [pc, #168]	; (80002b8 <end+0x16>)
    MOV R1, #1000        // Setting the Frequency Counter at 1000
 800020e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    STR R1, [R0]
 8000212:	6001      	str	r1, [r0, #0]

    // Enable Timer 2
    LDR R0, =TIM2_CR1
 8000214:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    MOV R1, #(1 << 0)      // Set bit 0 (CEN) to enable the timer
 8000218:	f04f 0101 	mov.w	r1, #1
    STR R1, [R0]
 800021c:	6001      	str	r1, [r0, #0]

0800021e <delay_loop>:

delay_loop:
    // Wait until the timer reaches zero (UIF flag is set)
    LDR R0, =TIM2_SR       // Load the status register
 800021e:	4827      	ldr	r0, [pc, #156]	; (80002bc <end+0x1a>)
    LDR R1, [R0]
 8000220:	6801      	ldr	r1, [r0, #0]
    TST R1, #(1 << 0)      // Check the UIF (Update Interrupt Flag) bit
 8000222:	f011 0f01 	tst.w	r1, #1
    BEQ delay_loop         // If the UIF bit is not set, keep looping
 8000226:	d0fa      	beq.n	800021e <delay_loop>

    // Clear the UIF bit by writing 0 to it
    LDR R0, =TIM2_SR
 8000228:	4824      	ldr	r0, [pc, #144]	; (80002bc <end+0x1a>)
    MOV R1, #0             // Clear the UIF bit
 800022a:	f04f 0100 	mov.w	r1, #0
    STR R1, [R0]
 800022e:	6001      	str	r1, [r0, #0]

    POP {PC}               // Return from function
 8000230:	bd00      	pop	{pc}

08000232 <main>:
.text
.global main

main:
    // Button enable (input)
    LDR R2, =GPIOA         // Loading port A address into R0 register
 8000232:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
    LDRB R3, [R0, #MODER]  // Loading the byte from GPIOA MODER (offset 0x00)
 8000236:	7803      	ldrb	r3, [r0, #0]
    AND R3, #0b11111100    // Bitmasking to change only the last two bits (bits 0 and 1)
 8000238:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
    STRB R3, [R2, #MODER]  // Save back to GPIOA MODER
 800023c:	7013      	strb	r3, [r2, #0]

    BL enable_peripheral_clocks
 800023e:	f7ff ffc9 	bl	80001d4 <enable_peripheral_clocks>
    BL initialise_discovery_board
 8000242:	f7ff ffcd 	bl	80001e0 <initialise_discovery_board>
    MOV R4, #0              // Load LED pattern into a register
 8000246:	f04f 0400 	mov.w	r4, #0
    LDRB R5, =0b00000001
 800024a:	f04f 0501 	mov.w	r5, #1

    LDR R7, =string1 // stores the string
 800024e:	4f1c      	ldr	r7, [pc, #112]	; (80002c0 <end+0x1e>)
    MOV R9, #ASCII_LOWERCASE_A // will be the comparison register
 8000250:	f04f 0961 	mov.w	r9, #97	; 0x61
    MOV R10, #0
 8000254:	f04f 0a00 	mov.w	sl, #0

    B loop
 8000258:	e7ff      	b.n	800025a <loop>

0800025a <loop>:

loop:

	LDRB R6, [R2, #IDR]    // Read the input from GPIOA IDR
 800025a:	7c16      	ldrb	r6, [r2, #16]
    ANDS R6, #0x01          // Check if button is on
 800025c:	f016 0601 	ands.w	r6, r6, #1
    BNE button_pressed      // Branch if button is pressed
 8000260:	d10e      	bne.n	8000280 <button_pressed>
	#BL delay
	LDRB R8, [R7], #1      //the selected letter we are on
 8000262:	f817 8b01 	ldrb.w	r8, [r7], #1
	CMP R8, #0             // Check for null terminator
 8000266:	f1b8 0f00 	cmp.w	r8, #0
    BEQ end                // If null terminator found, end loop
 800026a:	d01a      	beq.n	80002a2 <end>

	CMP R8, R9
 800026c:	45c8      	cmp	r8, r9
	BEQ LED_Counter
 800026e:	d000      	beq.n	8000272 <LED_Counter>

    B loop
 8000270:	e7f3      	b.n	800025a <loop>

08000272 <LED_Counter>:

LED_Counter:
	ORR R4, R4, R5 // Set the LED pattern
 8000272:	ea44 0405 	orr.w	r4, r4, r5
    LSL R5, R5, #0x01
 8000276:	ea4f 0545 	mov.w	r5, r5, lsl #1
    ADD R10, R10, #1
 800027a:	f10a 0a01 	add.w	sl, sl, #1
    @BL delay
    B loop
 800027e:	e7ec      	b.n	800025a <loop>

08000280 <button_pressed>:


button_pressed:
	CMP R9, #ASCII_LOWERCASE_Z
 8000280:	f1b9 0f7a 	cmp.w	r9, #122	; 0x7a
	BEQ Reset_Letter
 8000284:	d00a      	beq.n	800029c <Reset_Letter>
    MOV R9, #ASCII_LOWERCASE_A + 1
 8000286:	f04f 0962 	mov.w	r9, #98	; 0x62
   	MOV R4, #0              //  reset LED pattern into a register
 800028a:	f04f 0400 	mov.w	r4, #0
    LDRB R5, =0b00000001 // reset comparison bit
 800028e:	f04f 0501 	mov.w	r5, #1
    SUB R7, R7, R10		// go back to the begining of the word
 8000292:	eba7 070a 	sub.w	r7, r7, sl
	MOV R10, #0
 8000296:	f04f 0a00 	mov.w	sl, #0
    B loop
 800029a:	e7de      	b.n	800025a <loop>

0800029c <Reset_Letter>:

Reset_Letter:
	MOV R9, #ASCII_LOWERCASE_A
 800029c:	f04f 0961 	mov.w	r9, #97	; 0x61
	B loop
 80002a0:	e7db      	b.n	800025a <loop>

080002a2 <end>:

end:
	STRB R4, [R0, #ODR + 1]     // Save the LED pattern
 80002a2:	7544      	strb	r4, [r0, #21]
	B .
 80002a4:	e7fe      	b.n	80002a4 <end+0x2>
 80002a6:	0000      	.short	0x0000
	LDR R0, =RCC  @ load the address of the RCC address boundary (for enabling the IO clock)
 80002a8:	40021000 	.word	0x40021000
	LDR R0, =GPIOE 	@ load the address of the GPIOE register into R0
 80002ac:	48001000 	.word	0x48001000
    LDR R0, =RCC_APB1ENR
 80002b0:	4002101c 	.word	0x4002101c
    LDR R0, =TIM2_PSC
 80002b4:	40000028 	.word	0x40000028
    LDR R0, =TIM2_ARR
 80002b8:	4000002c 	.word	0x4000002c
    LDR R0, =TIM2_SR       // Load the status register
 80002bc:	40000010 	.word	0x40000010
    LDR R7, =string1 // stores the string
 80002c0:	20000000 	.word	0x20000000

080002c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002c4:	480d      	ldr	r0, [pc, #52]	; (80002fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002c6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002c8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002cc:	480c      	ldr	r0, [pc, #48]	; (8000300 <LoopForever+0x6>)
  ldr r1, =_edata
 80002ce:	490d      	ldr	r1, [pc, #52]	; (8000304 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002d0:	4a0d      	ldr	r2, [pc, #52]	; (8000308 <LoopForever+0xe>)
  movs r3, #0
 80002d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002d4:	e002      	b.n	80002dc <LoopCopyDataInit>

080002d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002da:	3304      	adds	r3, #4

080002dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002e0:	d3f9      	bcc.n	80002d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002e2:	4a0a      	ldr	r2, [pc, #40]	; (800030c <LoopForever+0x12>)
  ldr r4, =_ebss
 80002e4:	4c0a      	ldr	r4, [pc, #40]	; (8000310 <LoopForever+0x16>)
  movs r3, #0
 80002e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002e8:	e001      	b.n	80002ee <LoopFillZerobss>

080002ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002ec:	3204      	adds	r2, #4

080002ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002f0:	d3fb      	bcc.n	80002ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002f2:	f000 f811 	bl	8000318 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002f6:	f7ff ff9c 	bl	8000232 <main>

080002fa <LoopForever>:

LoopForever:
  b LoopForever
 80002fa:	e7fe      	b.n	80002fa <LoopForever>
  ldr   r0, =_estack
 80002fc:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000300:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000304:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000308:	08000380 	.word	0x08000380
  ldr r2, =_sbss
 800030c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000310:	20000020 	.word	0x20000020

08000314 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000314:	e7fe      	b.n	8000314 <ADC1_2_IRQHandler>
	...

08000318 <__libc_init_array>:
 8000318:	b570      	push	{r4, r5, r6, lr}
 800031a:	4d0d      	ldr	r5, [pc, #52]	; (8000350 <__libc_init_array+0x38>)
 800031c:	4c0d      	ldr	r4, [pc, #52]	; (8000354 <__libc_init_array+0x3c>)
 800031e:	1b64      	subs	r4, r4, r5
 8000320:	10a4      	asrs	r4, r4, #2
 8000322:	2600      	movs	r6, #0
 8000324:	42a6      	cmp	r6, r4
 8000326:	d109      	bne.n	800033c <__libc_init_array+0x24>
 8000328:	4d0b      	ldr	r5, [pc, #44]	; (8000358 <__libc_init_array+0x40>)
 800032a:	4c0c      	ldr	r4, [pc, #48]	; (800035c <__libc_init_array+0x44>)
 800032c:	f000 f818 	bl	8000360 <_init>
 8000330:	1b64      	subs	r4, r4, r5
 8000332:	10a4      	asrs	r4, r4, #2
 8000334:	2600      	movs	r6, #0
 8000336:	42a6      	cmp	r6, r4
 8000338:	d105      	bne.n	8000346 <__libc_init_array+0x2e>
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000340:	4798      	blx	r3
 8000342:	3601      	adds	r6, #1
 8000344:	e7ee      	b.n	8000324 <__libc_init_array+0xc>
 8000346:	f855 3b04 	ldr.w	r3, [r5], #4
 800034a:	4798      	blx	r3
 800034c:	3601      	adds	r6, #1
 800034e:	e7f2      	b.n	8000336 <__libc_init_array+0x1e>
 8000350:	08000378 	.word	0x08000378
 8000354:	08000378 	.word	0x08000378
 8000358:	08000378 	.word	0x08000378
 800035c:	0800037c 	.word	0x0800037c

08000360 <_init>:
 8000360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000362:	bf00      	nop
 8000364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000366:	bc08      	pop	{r3}
 8000368:	469e      	mov	lr, r3
 800036a:	4770      	bx	lr

0800036c <_fini>:
 800036c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800036e:	bf00      	nop
 8000370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000372:	bc08      	pop	{r3}
 8000374:	469e      	mov	lr, r3
 8000376:	4770      	bx	lr
