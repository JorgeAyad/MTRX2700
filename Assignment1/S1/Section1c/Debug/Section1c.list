
Section1c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001dc  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000370  08000370  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000370  08000370  00020058  2**0
                  CONTENTS
  4 .ARM          00000000  08000370  08000370  00020058  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000370  08000370  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000370  08000370  00010370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000374  08000374  00010374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  08000378  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020058  2**0
                  CONTENTS
 10 .bss          0000001c  20000058  20000058  00020058  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000074  20000074  00020058  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 14 .debug_line   0000011b  00000000  00000000  000200cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line_str 00000077  00000000  00000000  000201e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_info   00000048  00000000  00000000  0002025d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00000026  00000000  00000000  000202a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00000048  00000000  00000000  000202d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00000083  00000000  00000000  00020318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00000019  00000000  00000000  0002039b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000002c  00000000  00000000  000203b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000058 	.word	0x20000058
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000358 	.word	0x08000358

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000005c 	.word	0x2000005c
 80001d0:	08000358 	.word	0x08000358

080001d4 <main>:
.text


main:
    // Initialize variables
    LDR R1, =inputString   // Load address of the input string
 80001d4:	4935      	ldr	r1, [pc, #212]	; (80002ac <end+0xa>)
    LDR R2, =outputString  // Load address of the output string
 80001d6:	4a36      	ldr	r2, [pc, #216]	; (80002b0 <end+0xe>)
	LDR R3, =encoded_alphabet // Load address of the encoded_alphabet
 80001d8:	4b36      	ldr	r3, [pc, #216]	; (80002b4 <end+0x12>)
	LDR R4, =decoded_alphabet // Load address of the decoded_alphabet
 80001da:	4c37      	ldr	r4, [pc, #220]	; (80002b8 <end+0x16>)

080001dc <loop>:
loop:
    LDRB R5, [R1], #1      // Load byte from input string, increment pointer
 80001dc:	f811 5b01 	ldrb.w	r5, [r1], #1
    CMP R5, #0             // Check for null terminator
 80001e0:	2d00      	cmp	r5, #0
    BEQ end                // If null terminator found, end loop
 80001e2:	d05e      	beq.n	80002a2 <end>

	CMP R5, #ASCII_UPPERCASE_A // Check if character is uppercase
 80001e4:	2d41      	cmp	r5, #65	; 0x41
    BLT store_char // Not uppercase
 80001e6:	db59      	blt.n	800029c <store_char>
    CMP R5, #ASCII_UPPERCASE_Z //check if character is within bound of Uppercase
 80001e8:	2d5a      	cmp	r5, #90	; 0x5a
    BGT check_lowercase// check for lowercase
 80001ea:	dc26      	bgt.n	800023a <check_lowercase>

    //check for what mode it is
    LDR R6, =MODE
 80001ec:	f04f 0601 	mov.w	r6, #1
    CMP R6, #0
 80001f0:	2e00      	cmp	r6, #0
    BEQ Encode
 80001f2:	d000      	beq.n	80001f6 <Encode>
   	B Decode
 80001f4:	e011      	b.n	800021a <Decode>

080001f6 <Encode>:


Encode:
    LDR R7, =0           // Initialize offset
 80001f6:	f04f 0700 	mov.w	r7, #0
    MOV R8, R5           // Move input character to R8 for comparison
 80001fa:	46a8      	mov	r8, r5

080001fc <encode_loop>:
encode_loop:
    LDRB R9, [R3, R7]   // Load character from encoded alphabet
 80001fc:	f813 9007 	ldrb.w	r9, [r3, r7]
    CMP R8, R9           // Compare input character with encoded character
 8000200:	45c8      	cmp	r8, r9
    BEQ code_found       // If a match is found, jump to code_found
 8000202:	d006      	beq.n	8000212 <code_found>
    ADD R7, R7, #1       // Increment offset to check the next character
 8000204:	f107 0701 	add.w	r7, r7, #1
    CMP R7, #26          // Check if we have checked all characters in the alphabet
 8000208:	2f1a      	cmp	r7, #26
    BNE encode_loop      // If not, continue searching
 800020a:	d1f7      	bne.n	80001fc <encode_loop>
    ADD R3, R3, #32
 800020c:	f103 0320 	add.w	r3, r3, #32
    B store_char         // If no match found, store the original character
 8000210:	e044      	b.n	800029c <store_char>

08000212 <code_found>:
code_found:
    ADD R5, R4, R7       // Calculate the address of the corresponding decoded character
 8000212:	eb04 0507 	add.w	r5, r4, r7
    LDRB R5, [R5]        // Load the decoded character
 8000216:	782d      	ldrb	r5, [r5, #0]
    B store_char         // Store the decoded character and continue
 8000218:	e040      	b.n	800029c <store_char>

0800021a <Decode>:

Decode:
	LDR R7, =0
 800021a:	f04f 0700 	mov.w	r7, #0
	MOV R8, R5
 800021e:	46a8      	mov	r8, r5

08000220 <Decode_Loop>:
Decode_Loop:
	LDRB R9, [R4, R7]
 8000220:	f814 9007 	ldrb.w	r9, [r4, r7]
	CMP R8, R9
 8000224:	45c8      	cmp	r8, r9
	BEQ Decode_code
 8000226:	d004      	beq.n	8000232 <Decode_code>
	ADD R7, R7, #1
 8000228:	f107 0701 	add.w	r7, r7, #1
	CMP R7, #26
 800022c:	2f1a      	cmp	r7, #26
	BNE Decode_Loop
 800022e:	d1f7      	bne.n	8000220 <Decode_Loop>
	B store_char
 8000230:	e034      	b.n	800029c <store_char>

08000232 <Decode_code>:

Decode_code:
	ADD R5, R3, R7
 8000232:	eb03 0507 	add.w	r5, r3, r7
	LDRB R5, [R5]
 8000236:	782d      	ldrb	r5, [r5, #0]
	B store_char
 8000238:	e030      	b.n	800029c <store_char>

0800023a <check_lowercase>:


check_lowercase:
    CMP R5, #ASCII_LOWERCASE_A // Check if character is lowercase
 800023a:	2d61      	cmp	r5, #97	; 0x61
    BLT store_char
 800023c:	db2e      	blt.n	800029c <store_char>
    CMP R5, #ASCII_LOWERCASE_Z
 800023e:	2d7a      	cmp	r5, #122	; 0x7a
    BGT store_char
 8000240:	dc2c      	bgt.n	800029c <store_char>



	LDR R6, =MODE
 8000242:	f04f 0601 	mov.w	r6, #1
	CMP R6, #0
 8000246:	2e00      	cmp	r6, #0
    BEQ Encode_l
 8000248:	d000      	beq.n	800024c <Encode_l>
   	B Decode_l
 800024a:	e013      	b.n	8000274 <Decode_l>

0800024c <Encode_l>:

Encode_l:
    LDR R7, =0           // Initialize offset
 800024c:	f04f 0700 	mov.w	r7, #0
    MOV R8, R5
 8000250:	46a8      	mov	r8, r5
    SUB R8, R8, #32           // Move input character to R8 for comparison
 8000252:	f1a8 0820 	sub.w	r8, r8, #32

08000256 <encode_loop_l>:

encode_loop_l:
    LDRB R9, [R3, R7]   // Load character from encoded alphabet
 8000256:	f813 9007 	ldrb.w	r9, [r3, r7]
    CMP R8, R9           // Compare input character with encoded character
 800025a:	45c8      	cmp	r8, r9
    BEQ code_found_l     // If a match is found, jump to code_found_l
 800025c:	d004      	beq.n	8000268 <code_found_l>
    ADD R7, R7, #1       // Increment offset to check the next character
 800025e:	f107 0701 	add.w	r7, r7, #1
    CMP R7, #25          // Check if we have checked all characters in the alphabet
 8000262:	2f19      	cmp	r7, #25
    BNE encode_loop_l    // If not, continue searching
 8000264:	d1f7      	bne.n	8000256 <encode_loop_l>
    B store_char         // If no match found, store the original character
 8000266:	e019      	b.n	800029c <store_char>

08000268 <code_found_l>:

code_found_l:
    ADD R5, R4, R7
 8000268:	eb04 0507 	add.w	r5, r4, r7
    LDRB R5, [R5]
 800026c:	782d      	ldrb	r5, [r5, #0]
     ADD R5, R5, #32        // Load the decoded character
 800026e:	f105 0520 	add.w	r5, r5, #32
    B store_char         // Store the decoded character and continue
 8000272:	e013      	b.n	800029c <store_char>

08000274 <Decode_l>:

Decode_l:
    LDR R7, =0
 8000274:	f04f 0700 	mov.w	r7, #0
    MOV R8, R5
 8000278:	46a8      	mov	r8, r5
    SUB R8, R8, #32
 800027a:	f1a8 0820 	sub.w	r8, r8, #32

0800027e <Decode_Loop_l>:
Decode_Loop_l:
    LDRB R9, [R4, R7]
 800027e:	f814 9007 	ldrb.w	r9, [r4, r7]
    CMP R8, R9
 8000282:	45c8      	cmp	r8, r9
    BEQ Decode_code_l
 8000284:	d004      	beq.n	8000290 <Decode_code_l>
    ADD R7, R7, #1
 8000286:	f107 0701 	add.w	r7, r7, #1
    CMP R7, #25
 800028a:	2f19      	cmp	r7, #25
    BNE Decode_Loop_l
 800028c:	d1f7      	bne.n	800027e <Decode_Loop_l>
    B store_char
 800028e:	e005      	b.n	800029c <store_char>

08000290 <Decode_code_l>:

Decode_code_l:
    ADD R5, R3, R7
 8000290:	eb03 0507 	add.w	r5, r3, r7
    LDRB R5, [R5]
 8000294:	782d      	ldrb	r5, [r5, #0]
    ADD R5, R5, #32
 8000296:	f105 0520 	add.w	r5, r5, #32
    B store_char
 800029a:	e7ff      	b.n	800029c <store_char>

0800029c <store_char>:


store_char:
	STRB R5, [R2], #1      // Store byte into output string and increments pointer
 800029c:	f802 5b01 	strb.w	r5, [r2], #1
    B loop                 // Repeating the overall loop
 80002a0:	e79c      	b.n	80001dc <loop>

080002a2 <end>:

end:
    MOV R2, #0             // Null terminate output string to end the program
 80002a2:	f04f 0200 	mov.w	r2, #0
    STRB R2, [R1]
 80002a6:	700a      	strb	r2, [r1, #0]

    // End program
    B .
 80002a8:	e7fe      	b.n	80002a8 <end+0x6>
 80002aa:	0000      	.short	0x0000
    LDR R1, =inputString   // Load address of the input string
 80002ac:	20000000 	.word	0x20000000
    LDR R2, =outputString  // Load address of the output string
 80002b0:	20000005 	.word	0x20000005
	LDR R3, =encoded_alphabet // Load address of the encoded_alphabet
 80002b4:	20000025 	.word	0x20000025
	LDR R4, =decoded_alphabet // Load address of the decoded_alphabet
 80002b8:	2000003f 	.word	0x2000003f

080002bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002bc:	480d      	ldr	r0, [pc, #52]	; (80002f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002be:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002c0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002c4:	480c      	ldr	r0, [pc, #48]	; (80002f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80002c6:	490d      	ldr	r1, [pc, #52]	; (80002fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80002c8:	4a0d      	ldr	r2, [pc, #52]	; (8000300 <LoopForever+0xe>)
  movs r3, #0
 80002ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002cc:	e002      	b.n	80002d4 <LoopCopyDataInit>

080002ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002d2:	3304      	adds	r3, #4

080002d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002d8:	d3f9      	bcc.n	80002ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002da:	4a0a      	ldr	r2, [pc, #40]	; (8000304 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002dc:	4c0a      	ldr	r4, [pc, #40]	; (8000308 <LoopForever+0x16>)
  movs r3, #0
 80002de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002e0:	e001      	b.n	80002e6 <LoopFillZerobss>

080002e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002e4:	3204      	adds	r2, #4

080002e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002e8:	d3fb      	bcc.n	80002e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002ea:	f000 f811 	bl	8000310 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ee:	f7ff ff71 	bl	80001d4 <main>

080002f2 <LoopForever>:

LoopForever:
  b LoopForever
 80002f2:	e7fe      	b.n	80002f2 <LoopForever>
  ldr   r0, =_estack
 80002f4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80002f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002fc:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 8000300:	08000378 	.word	0x08000378
  ldr r2, =_sbss
 8000304:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 8000308:	20000074 	.word	0x20000074

0800030c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800030c:	e7fe      	b.n	800030c <ADC1_2_IRQHandler>
	...

08000310 <__libc_init_array>:
 8000310:	b570      	push	{r4, r5, r6, lr}
 8000312:	4d0d      	ldr	r5, [pc, #52]	; (8000348 <__libc_init_array+0x38>)
 8000314:	4c0d      	ldr	r4, [pc, #52]	; (800034c <__libc_init_array+0x3c>)
 8000316:	1b64      	subs	r4, r4, r5
 8000318:	10a4      	asrs	r4, r4, #2
 800031a:	2600      	movs	r6, #0
 800031c:	42a6      	cmp	r6, r4
 800031e:	d109      	bne.n	8000334 <__libc_init_array+0x24>
 8000320:	4d0b      	ldr	r5, [pc, #44]	; (8000350 <__libc_init_array+0x40>)
 8000322:	4c0c      	ldr	r4, [pc, #48]	; (8000354 <__libc_init_array+0x44>)
 8000324:	f000 f818 	bl	8000358 <_init>
 8000328:	1b64      	subs	r4, r4, r5
 800032a:	10a4      	asrs	r4, r4, #2
 800032c:	2600      	movs	r6, #0
 800032e:	42a6      	cmp	r6, r4
 8000330:	d105      	bne.n	800033e <__libc_init_array+0x2e>
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f855 3b04 	ldr.w	r3, [r5], #4
 8000338:	4798      	blx	r3
 800033a:	3601      	adds	r6, #1
 800033c:	e7ee      	b.n	800031c <__libc_init_array+0xc>
 800033e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000342:	4798      	blx	r3
 8000344:	3601      	adds	r6, #1
 8000346:	e7f2      	b.n	800032e <__libc_init_array+0x1e>
 8000348:	08000370 	.word	0x08000370
 800034c:	08000370 	.word	0x08000370
 8000350:	08000370 	.word	0x08000370
 8000354:	08000374 	.word	0x08000374

08000358 <_init>:
 8000358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800035a:	bf00      	nop
 800035c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800035e:	bc08      	pop	{r3}
 8000360:	469e      	mov	lr, r3
 8000362:	4770      	bx	lr

08000364 <_fini>:
 8000364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000366:	bf00      	nop
 8000368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800036a:	bc08      	pop	{r3}
 800036c:	469e      	mov	lr, r3
 800036e:	4770      	bx	lr
