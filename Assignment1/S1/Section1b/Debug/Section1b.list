
Section1b.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000168  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002fc  080002fc  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002fc  080002fc  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  080002fc  080002fc  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002fc  080002fc  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002fc  080002fc  000102fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000300  08000300  00010300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08000304  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020028  2**0
                  CONTENTS
 10 .bss          0000001c  20000028  20000028  00020028  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000044  20000044  00020028  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 14 .debug_line   000000f0  00000000  00000000  0002009b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line_str 00000077  00000000  00000000  0002018b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_info   00000047  00000000  00000000  00020202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00000026  00000000  00000000  00020249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00000048  00000000  00000000  00020270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00000083  00000000  00000000  000202b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00000019  00000000  00000000  0002033b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000002c  00000000  00000000  00020354  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000028 	.word	0x20000028
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080002e4 	.word	0x080002e4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000002c 	.word	0x2000002c
 80001d0:	080002e4 	.word	0x080002e4

080001d4 <main>:
.text


main:
    // Initialize variables
    LDR R0, =inputString   // Load address of the input string
 80001d4:	481a      	ldr	r0, [pc, #104]	; (8000240 <end+0x8>)
    LDR R1, =outputString  // Load address of the output string
 80001d6:	491b      	ldr	r1, [pc, #108]	; (8000244 <end+0xc>)

080001d8 <loop>:

loop:
    LDRB R2, [R0], #1      // Load byte from input string, increment pointer
 80001d8:	f810 2b01 	ldrb.w	r2, [r0], #1
    CMP R2, #0             // Check for null terminator
 80001dc:	2a00      	cmp	r2, #0
    BEQ end                // If null terminator found, end loop
 80001de:	d02b      	beq.n	8000238 <end>

    CMP R2, #ASCII_UPPERCASE_A // Check if character is uppercase
 80001e0:	2a41      	cmp	r2, #65	; 0x41
    BLT store_char // Not uppercase
 80001e2:	db26      	blt.n	8000232 <store_char>
    CMP R2, #ASCII_UPPERCASE_Z //check if character is within bound of Uppercase
 80001e4:	2a5a      	cmp	r2, #90	; 0x5a
    BGT check_lowercase// check for lowercase
 80001e6:	dc10      	bgt.n	800020a <check_lowercase>
    CMP R2, #ASCII_LOWERCASE_A
 80001e8:	2a61      	cmp	r2, #97	; 0x61


    SUB R3, R2, #ASCII_UPPERCASE_A // checking if new ascii value is outside bounds
 80001ea:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
	CMP R3, #CONVERT_DIFFERENCE //finding whether the caeser cipher needs to wrap around
 80001ee:	2b03      	cmp	r3, #3
	BGE Caeser_Cipher_no_bound_C // no wrapping
 80001f0:	da08      	bge.n	8000204 <Caeser_Cipher_no_bound_C>
	CMP R3, #CONVERT_DIFFERENCE
 80001f2:	2b03      	cmp	r3, #3
	BLE Caeser_Cipher_bounded_C //wrapping
 80001f4:	ddff      	ble.n	80001f6 <Caeser_Cipher_bounded_C>

080001f6 <Caeser_Cipher_bounded_C>:

Caeser_Cipher_bounded_C:
	SUB R4, R3, #CONVERT_DIFFERENCE //finding how much it needs to carry
 80001f6:	f1a3 0403 	sub.w	r4, r3, #3
	ADD R4, R4, #1
 80001fa:	f104 0401 	add.w	r4, r4, #1
	ADD R2, R4, #ASCII_UPPERCASE_Z //performing caeser cipher
 80001fe:	f104 025a 	add.w	r2, r4, #90	; 0x5a
	B store_char
 8000202:	e016      	b.n	8000232 <store_char>

08000204 <Caeser_Cipher_no_bound_C>:

Caeser_Cipher_no_bound_C:
	SUB R2, R2, #CONVERT_DIFFERENCE
 8000204:	f1a2 0203 	sub.w	r2, r2, #3
	B store_char
 8000208:	e013      	b.n	8000232 <store_char>

0800020a <check_lowercase>:

check_lowercase:
    CMP R2, #ASCII_LOWERCASE_A // Check if character is lowercase
 800020a:	2a61      	cmp	r2, #97	; 0x61
    BLT store_char
 800020c:	db11      	blt.n	8000232 <store_char>
    CMP R2, #ASCII_LOWERCASE_Z
 800020e:	2a7a      	cmp	r2, #122	; 0x7a
    BGT store_char
 8000210:	dc0f      	bgt.n	8000232 <store_char>

    SUB R3, R2, #ASCII_LOWERCASE_A // checking if new ascii value is outside bounds
 8000212:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
	CMP R3, #CONVERT_DIFFERENCE //finding whether the caeser cipher needs to wrap around
 8000216:	2b03      	cmp	r3, #3
	BGE Caeser_Cipher_no_bound_L // no wrapping
 8000218:	da08      	bge.n	800022c <Caeser_Cipher_no_bound_L>
	CMP R3, #CONVERT_DIFFERENCE
 800021a:	2b03      	cmp	r3, #3
	BLE Caeser_Cipher_bounded_L //wrapping
 800021c:	ddff      	ble.n	800021e <Caeser_Cipher_bounded_L>

0800021e <Caeser_Cipher_bounded_L>:

Caeser_Cipher_bounded_L:
	SUB R4, R3, #CONVERT_DIFFERENCE //finding how much it needs to carry
 800021e:	f1a3 0403 	sub.w	r4, r3, #3
	ADD R4, R4, #1
 8000222:	f104 0401 	add.w	r4, r4, #1
	ADD R2, R4, #ASCII_LOWERCASE_Z //performing caeser cipher
 8000226:	f104 027a 	add.w	r2, r4, #122	; 0x7a
	B store_char
 800022a:	e002      	b.n	8000232 <store_char>

0800022c <Caeser_Cipher_no_bound_L>:

Caeser_Cipher_no_bound_L:
	SUB R2, R2, #CONVERT_DIFFERENCE
 800022c:	f1a2 0203 	sub.w	r2, r2, #3
	B store_char
 8000230:	e7ff      	b.n	8000232 <store_char>

08000232 <store_char>:


store_char:
    STRB R2, [R1], #1      // Store byte into output string and increments pointer
 8000232:	f801 2b01 	strb.w	r2, [r1], #1
    B loop                 // Repeating the overall loop
 8000236:	e7cf      	b.n	80001d8 <loop>

08000238 <end>:

end:
    MOV R2, #0             // Null terminate output string to end the program
 8000238:	f04f 0200 	mov.w	r2, #0
    STRB R2, [R1]
 800023c:	700a      	strb	r2, [r1, #0]

    // End program
    B .
 800023e:	e7fe      	b.n	800023e <end+0x6>
    LDR R0, =inputString   // Load address of the input string
 8000240:	20000000 	.word	0x20000000
    LDR R1, =outputString  // Load address of the output string
 8000244:	20000005 	.word	0x20000005

08000248 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000248:	480d      	ldr	r0, [pc, #52]	; (8000280 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800024a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800024c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000250:	480c      	ldr	r0, [pc, #48]	; (8000284 <LoopForever+0x6>)
  ldr r1, =_edata
 8000252:	490d      	ldr	r1, [pc, #52]	; (8000288 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000254:	4a0d      	ldr	r2, [pc, #52]	; (800028c <LoopForever+0xe>)
  movs r3, #0
 8000256:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000258:	e002      	b.n	8000260 <LoopCopyDataInit>

0800025a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800025a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800025c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800025e:	3304      	adds	r3, #4

08000260 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000260:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000262:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000264:	d3f9      	bcc.n	800025a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000266:	4a0a      	ldr	r2, [pc, #40]	; (8000290 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000268:	4c0a      	ldr	r4, [pc, #40]	; (8000294 <LoopForever+0x16>)
  movs r3, #0
 800026a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800026c:	e001      	b.n	8000272 <LoopFillZerobss>

0800026e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800026e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000270:	3204      	adds	r2, #4

08000272 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000272:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000274:	d3fb      	bcc.n	800026e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000276:	f000 f811 	bl	800029c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800027a:	f7ff ffab 	bl	80001d4 <main>

0800027e <LoopForever>:

LoopForever:
  b LoopForever
 800027e:	e7fe      	b.n	800027e <LoopForever>
  ldr   r0, =_estack
 8000280:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000284:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000288:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 800028c:	08000304 	.word	0x08000304
  ldr r2, =_sbss
 8000290:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8000294:	20000044 	.word	0x20000044

08000298 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000298:	e7fe      	b.n	8000298 <ADC1_2_IRQHandler>
	...

0800029c <__libc_init_array>:
 800029c:	b570      	push	{r4, r5, r6, lr}
 800029e:	4d0d      	ldr	r5, [pc, #52]	; (80002d4 <__libc_init_array+0x38>)
 80002a0:	4c0d      	ldr	r4, [pc, #52]	; (80002d8 <__libc_init_array+0x3c>)
 80002a2:	1b64      	subs	r4, r4, r5
 80002a4:	10a4      	asrs	r4, r4, #2
 80002a6:	2600      	movs	r6, #0
 80002a8:	42a6      	cmp	r6, r4
 80002aa:	d109      	bne.n	80002c0 <__libc_init_array+0x24>
 80002ac:	4d0b      	ldr	r5, [pc, #44]	; (80002dc <__libc_init_array+0x40>)
 80002ae:	4c0c      	ldr	r4, [pc, #48]	; (80002e0 <__libc_init_array+0x44>)
 80002b0:	f000 f818 	bl	80002e4 <_init>
 80002b4:	1b64      	subs	r4, r4, r5
 80002b6:	10a4      	asrs	r4, r4, #2
 80002b8:	2600      	movs	r6, #0
 80002ba:	42a6      	cmp	r6, r4
 80002bc:	d105      	bne.n	80002ca <__libc_init_array+0x2e>
 80002be:	bd70      	pop	{r4, r5, r6, pc}
 80002c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80002c4:	4798      	blx	r3
 80002c6:	3601      	adds	r6, #1
 80002c8:	e7ee      	b.n	80002a8 <__libc_init_array+0xc>
 80002ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80002ce:	4798      	blx	r3
 80002d0:	3601      	adds	r6, #1
 80002d2:	e7f2      	b.n	80002ba <__libc_init_array+0x1e>
 80002d4:	080002fc 	.word	0x080002fc
 80002d8:	080002fc 	.word	0x080002fc
 80002dc:	080002fc 	.word	0x080002fc
 80002e0:	08000300 	.word	0x08000300

080002e4 <_init>:
 80002e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002e6:	bf00      	nop
 80002e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002ea:	bc08      	pop	{r3}
 80002ec:	469e      	mov	lr, r3
 80002ee:	4770      	bx	lr

080002f0 <_fini>:
 80002f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002f2:	bf00      	nop
 80002f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002f6:	bc08      	pop	{r3}
 80002f8:	469e      	mov	lr, r3
 80002fa:	4770      	bx	lr
