
Section4c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000194  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000328  08000330  00010330  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000328  08000328  00010330  2**0
                  CONTENTS
  4 .ARM          00000000  08000328  08000328  00010330  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000328  08000330  00010330  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000328  08000328  00010328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800032c  0800032c  0001032c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010330  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010330  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010330  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00010360  2**0
                  CONTENTS, READONLY
 14 .debug_line   00000110  00000000  00000000  000103a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line_str 0000007f  00000000  00000000  000104b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_info   00000048  00000000  00000000  00010532  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00000026  00000000  00000000  0001057a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00000048  00000000  00000000  000105a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00000086  00000000  00000000  000105e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00000019  00000000  00000000  0001066e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000002c  00000000  00000000  00010688  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000310 	.word	0x08000310

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000310 	.word	0x08000310

080001d4 <delay>:
.equ TIM2_PSC, 0x40000028        // Timer prescaler register address
.equ TIM2_ARR, 0x4000002C        // Timer auto-reload register address
.equ TIM2_SR, 0x40000010         // Timer status register address

delay:
    push {lr}             // Save link register
 80001d4:	b500      	push	{lr}

    // Enable clock for Timer 2
    ldr r0, =RCC_APB1ENR
 80001d6:	4820      	ldr	r0, [pc, #128]	; (8000258 <loop+0x28>)
    ldr r1, [r0]
 80001d8:	6801      	ldr	r1, [r0, #0]
    orr r1, r1, #(1 << 0)  // Set bit 0 to enable TIM2 clock
 80001da:	f041 0101 	orr.w	r1, r1, #1
    str r1, [r0]
 80001de:	6001      	str	r1, [r0, #0]

    // Configure Timer 2
    ldr r0, =TIM2_CR1      // Load address of TIM2_CR1
 80001e0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    mov r1, #0             // Clear all bits
 80001e4:	f04f 0100 	mov.w	r1, #0
    str r1, [r0]           // Store back to CR1
 80001e8:	6001      	str	r1, [r0, #0]

    // Set prescaler for desired clock frequency (adjust according to your setup)
    ldr r0, =TIM2_PSC
 80001ea:	481c      	ldr	r0, [pc, #112]	; (800025c <loop+0x2c>)
    //mov r1, #7 // 1 microsecond delay (presacler of 7)
    //mov r1, #999 for one second the prescaler will be 750 as it represents one second the best and meanshas a frequency of 10652 ticks a second)
    //mov r1, #2221 we do this such that every for 3600 ticks in an hour so a tick a second

    mov r1, #799 //demosntrates a 0.1ms delay as there are 10000 ticks in a second
 80001ec:	f240 311f 	movw	r1, #799	; 0x31f


                // Assuming HCLK is 72MHz, prescaler = 71
    str r1, [r0]
 80001f0:	6001      	str	r1, [r0, #0]

    // Calculate the ARR value for the desired delay time (adjust according to your desired delay)
    ldr r0, =TIM2_ARR
 80001f2:	481b      	ldr	r0, [pc, #108]	; (8000260 <loop+0x30>)
    mov r1, #0x1F40        // 8000 cycles at 72MHz, gives a delay of approximately 0.1 seconds
 80001f4:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
    str r1, [r0]
 80001f8:	6001      	str	r1, [r0, #0]

    // Enable Timer 2
    ldr r0, =TIM2_CR1
 80001fa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    mov r1, #(1 << 0)      // Set bit 0 (CEN) to enable the timer
 80001fe:	f04f 0101 	mov.w	r1, #1
    str r1, [r0]
 8000202:	6001      	str	r1, [r0, #0]

08000204 <delay_loop>:

delay_loop:
    // Wait until the timer reaches zero (UIF flag is set)
    ldr r0, =TIM2_SR       // Load the status register
 8000204:	4817      	ldr	r0, [pc, #92]	; (8000264 <loop+0x34>)
    ldr r1, [r0]
 8000206:	6801      	ldr	r1, [r0, #0]
    tst r1, #(1 << 0)      // Check the UIF (Update Interrupt Flag) bit
 8000208:	f011 0f01 	tst.w	r1, #1
    beq delay_loop         // If the UIF bit is not set, keep looping
 800020c:	d0fa      	beq.n	8000204 <delay_loop>

    // Clear the UIF bit by writing 0 to it
    ldr r0, =TIM2_SR
 800020e:	4815      	ldr	r0, [pc, #84]	; (8000264 <loop+0x34>)
    mov r1, #0             // Clear the UIF bit
 8000210:	f04f 0100 	mov.w	r1, #0
    str r1, [r0]
 8000214:	6001      	str	r1, [r0, #0]

    pop {pc}               // Return from function
 8000216:	bd00      	pop	{pc}

08000218 <main>:

.equ LED_PIN, 9                   // Assuming LED is connected to pin 9 of GPIOE

main:
    // Enable clock for GPIOE
    ldr r0, =RCC_AHBENR
 8000218:	4813      	ldr	r0, [pc, #76]	; (8000268 <loop+0x38>)
    ldr r1, [r0]
 800021a:	6801      	ldr	r1, [r0, #0]
    orr r1, r1, #(1 << 21)         // Set bit 21 to enable GPIOE clock
 800021c:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
    str r1, [r0]
 8000220:	6001      	str	r1, [r0, #0]

    // Set LED pin as output
    ldr r0, =GPIOE_MODER
 8000222:	4812      	ldr	r0, [pc, #72]	; (800026c <loop+0x3c>)
    ldr r1, [r0]
 8000224:	6801      	ldr	r1, [r0, #0]
    bic r1, r1, #(0b11 << (LED_PIN * 2))  // Clear bits for LED pin
 8000226:	f421 2140 	bic.w	r1, r1, #786432	; 0xc0000
    orr r1, r1, #(0b01 << (LED_PIN * 2))  // Set pin as output (01)
 800022a:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
    str r1, [r0]
 800022e:	6001      	str	r1, [r0, #0]

08000230 <loop>:

loop:
    // Turn on LED
    ldr r0, =GPIOE_ODR
 8000230:	480f      	ldr	r0, [pc, #60]	; (8000270 <loop+0x40>)
    ldr r1, [r0]
 8000232:	6801      	ldr	r1, [r0, #0]
    orr r1, r1, #(1 << LED_PIN)    // Set bit for LED pin
 8000234:	f441 7100 	orr.w	r1, r1, #512	; 0x200
    str r1, [r0]
 8000238:	6001      	str	r1, [r0, #0]

    // Delay
    ldr r0, =10000             // Adjust delay as needed to some arbitary number for now
 800023a:	f242 7010 	movw	r0, #10000	; 0x2710
    bl delay
 800023e:	f7ff ffc9 	bl	80001d4 <delay>

    // Turn off LED
    ldr r0, =GPIOE_ODR
 8000242:	480b      	ldr	r0, [pc, #44]	; (8000270 <loop+0x40>)
    ldr r1, [r0]
 8000244:	6801      	ldr	r1, [r0, #0]
    bic r1, r1, #(1 << LED_PIN)    // Clear bit for LED pin
 8000246:	f421 7100 	bic.w	r1, r1, #512	; 0x200
    str r1, [r0]
 800024a:	6001      	str	r1, [r0, #0]

    // Delay
    ldr r0, =10000             // Adjust delay as needed to some arbitary number for now
 800024c:	f242 7010 	movw	r0, #10000	; 0x2710
    bl delay
 8000250:	f7ff ffc0 	bl	80001d4 <delay>

    // Repeat indefinitely
    B loop
 8000254:	e7ec      	b.n	8000230 <loop>
 8000256:	0000      	.short	0x0000
    ldr r0, =RCC_APB1ENR
 8000258:	4002101c 	.word	0x4002101c
    ldr r0, =TIM2_PSC
 800025c:	40000028 	.word	0x40000028
    ldr r0, =TIM2_ARR
 8000260:	4000002c 	.word	0x4000002c
    ldr r0, =TIM2_SR       // Load the status register
 8000264:	40000010 	.word	0x40000010
    ldr r0, =RCC_AHBENR
 8000268:	40021014 	.word	0x40021014
    ldr r0, =GPIOE_MODER
 800026c:	48001000 	.word	0x48001000
    ldr r0, =GPIOE_ODR
 8000270:	48001014 	.word	0x48001014

08000274 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000274:	480d      	ldr	r0, [pc, #52]	; (80002ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000276:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000278:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800027c:	480c      	ldr	r0, [pc, #48]	; (80002b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800027e:	490d      	ldr	r1, [pc, #52]	; (80002b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000280:	4a0d      	ldr	r2, [pc, #52]	; (80002b8 <LoopForever+0xe>)
  movs r3, #0
 8000282:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000284:	e002      	b.n	800028c <LoopCopyDataInit>

08000286 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000286:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000288:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800028a:	3304      	adds	r3, #4

0800028c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800028c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800028e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000290:	d3f9      	bcc.n	8000286 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000292:	4a0a      	ldr	r2, [pc, #40]	; (80002bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000294:	4c0a      	ldr	r4, [pc, #40]	; (80002c0 <LoopForever+0x16>)
  movs r3, #0
 8000296:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000298:	e001      	b.n	800029e <LoopFillZerobss>

0800029a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800029a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800029c:	3204      	adds	r2, #4

0800029e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800029e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002a0:	d3fb      	bcc.n	800029a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002a2:	f000 f811 	bl	80002c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002a6:	f7ff ffb7 	bl	8000218 <main>

080002aa <LoopForever>:

LoopForever:
  b LoopForever
 80002aa:	e7fe      	b.n	80002aa <LoopForever>
  ldr   r0, =_estack
 80002ac:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80002b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002b4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002b8:	08000330 	.word	0x08000330
  ldr r2, =_sbss
 80002bc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002c0:	2000001c 	.word	0x2000001c

080002c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002c4:	e7fe      	b.n	80002c4 <ADC1_2_IRQHandler>
	...

080002c8 <__libc_init_array>:
 80002c8:	b570      	push	{r4, r5, r6, lr}
 80002ca:	4d0d      	ldr	r5, [pc, #52]	; (8000300 <__libc_init_array+0x38>)
 80002cc:	4c0d      	ldr	r4, [pc, #52]	; (8000304 <__libc_init_array+0x3c>)
 80002ce:	1b64      	subs	r4, r4, r5
 80002d0:	10a4      	asrs	r4, r4, #2
 80002d2:	2600      	movs	r6, #0
 80002d4:	42a6      	cmp	r6, r4
 80002d6:	d109      	bne.n	80002ec <__libc_init_array+0x24>
 80002d8:	4d0b      	ldr	r5, [pc, #44]	; (8000308 <__libc_init_array+0x40>)
 80002da:	4c0c      	ldr	r4, [pc, #48]	; (800030c <__libc_init_array+0x44>)
 80002dc:	f000 f818 	bl	8000310 <_init>
 80002e0:	1b64      	subs	r4, r4, r5
 80002e2:	10a4      	asrs	r4, r4, #2
 80002e4:	2600      	movs	r6, #0
 80002e6:	42a6      	cmp	r6, r4
 80002e8:	d105      	bne.n	80002f6 <__libc_init_array+0x2e>
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80002f0:	4798      	blx	r3
 80002f2:	3601      	adds	r6, #1
 80002f4:	e7ee      	b.n	80002d4 <__libc_init_array+0xc>
 80002f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80002fa:	4798      	blx	r3
 80002fc:	3601      	adds	r6, #1
 80002fe:	e7f2      	b.n	80002e6 <__libc_init_array+0x1e>
 8000300:	08000328 	.word	0x08000328
 8000304:	08000328 	.word	0x08000328
 8000308:	08000328 	.word	0x08000328
 800030c:	0800032c 	.word	0x0800032c

08000310 <_init>:
 8000310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000312:	bf00      	nop
 8000314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000316:	bc08      	pop	{r3}
 8000318:	469e      	mov	lr, r3
 800031a:	4770      	bx	lr

0800031c <_fini>:
 800031c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800031e:	bf00      	nop
 8000320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000322:	bc08      	pop	{r3}
 8000324:	469e      	mov	lr, r3
 8000326:	4770      	bx	lr
