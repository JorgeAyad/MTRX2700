
Recieving.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000334  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004c8  080004c8  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004c8  080004c8  0002009c  2**0
                  CONTENTS
  4 .ARM          00000000  080004c8  080004c8  0002009c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004c8  080004c8  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004c8  080004c8  000104c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004cc  080004cc  000104cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  080004d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002009c  2**0
                  CONTENTS
 10 .bss          0000001c  2000009c  2000009c  0002009c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000b8  200000b8  0002009c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 14 .debug_line   000001c6  00000000  00000000  0002010f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line_str 00000093  00000000  00000000  000202d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_info   00000048  00000000  00000000  00020368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00000026  00000000  00000000  000203b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00000048  00000000  00000000  000203d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000008b  00000000  00000000  00020420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00000019  00000000  00000000  000204ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000002c  00000000  00000000  000204c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000009c 	.word	0x2000009c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080004b0 	.word	0x080004b0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	200000a0 	.word	0x200000a0
 80001d0:	080004b0 	.word	0x080004b0

080001d4 <enable_peripheral_clocks>:

@ function to enable the clocks for the peripherals we could be using (A, B, C, D and E)
enable_peripheral_clocks:

	@ load the address of the RCC address boundary (for enabling the IO clock)
	LDR R0, =RCC
 80001d4:	4880      	ldr	r0, [pc, #512]	; (80003d8 <End_Program+0x2>)

	@ enable all of the GPIO peripherals in AHBENR
	LDR R1, [R0, #AHBENR]
 80001d6:	6941      	ldr	r1, [r0, #20]
	ORR R1, 1 << GPIOE_ENABLE | 1 << GPIOD_ENABLE | 1 << GPIOC_ENABLE | 1 << GPIOB_ENABLE | 1 << GPIOA_ENABLE  @ enable GPIO
 80001d8:	f441 1178 	orr.w	r1, r1, #4063232	; 0x3e0000
	STR R1, [R0, #AHBENR]
 80001dc:	6141      	str	r1, [r0, #20]

	BX LR @ return
 80001de:	4770      	bx	lr

080001e0 <enable_uart>:
enable_uart:

	@make a note about the different ways that we set specific bits in this configuration section

	@ select which UART you want to enable
	LDR R0, =GPIOC
 80001e0:	487e      	ldr	r0, [pc, #504]	; (80003dc <End_Program+0x6>)

	@ set the alternate function for the UART pins (what ever you have selected)
	LDR R1, =0x77
 80001e2:	f04f 0177 	mov.w	r1, #119	; 0x77
	STRB R1, [R0, AFRL + 2]
 80001e6:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22

	@ modify the mode of the GPIO pins you want to use to enable 'alternate function mode'
	LDR R1, [R0, GPIO_MODER]
 80001ea:	6801      	ldr	r1, [r0, #0]
	ORR R1, 0xA00 @ Mask for pins to change to 'alternate function mode'
 80001ec:	f441 6120 	orr.w	r1, r1, #2560	; 0xa00
	STR R1, [R0, GPIO_MODER]
 80001f0:	6001      	str	r1, [r0, #0]

	@ modify the speed of the GPIO pins you want to use to enable 'high speed'
	LDR R1, [R0, GPIO_OSPEEDR]
 80001f2:	6881      	ldr	r1, [r0, #8]
	ORR R1, 0xF00 @ Mask for pins to be set as high speed
 80001f4:	f441 6170 	orr.w	r1, r1, #3840	; 0xf00
	STR R1, [R0, GPIO_OSPEEDR]
 80001f8:	6081      	str	r1, [r0, #8]

	@ Set the enable bit for the specific UART you want to use
	@ Note: this might be in APB1ENR or APB2ENR
	@ you can find this out by looking in the datasheet
	LDR R0, =RCC @ the base address for the register to turn clocks on/off
 80001fa:	4877      	ldr	r0, [pc, #476]	; (80003d8 <End_Program+0x2>)
	LDR R1, [R0, #APB2ENR] @ load the original value from the enable register
 80001fc:	6981      	ldr	r1, [r0, #24]
	ORR R1, 1 << UART_EN  @ apply the bit mask to the previous values of the enable the UART
 80001fe:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
	STR R1, [R0, #APB2ENR] @ store the modified enable register values back to RCC
 8000202:	6181      	str	r1, [r0, #24]

	@ this is the baud rate
	MOV R1, #0x46 @ from our earlier calculations (for 8MHz), store this in register R1
 8000204:	f04f 0146 	mov.w	r1, #70	; 0x46
	LDR R0, =UART @ the base address for the register to turn clocks on/off
 8000208:	4875      	ldr	r0, [pc, #468]	; (80003e0 <End_Program+0xa>)
	STRH R1, [R0, #USART_BRR] @ store this value directly in the first half word (16 bits) of
 800020a:	8181      	strh	r1, [r0, #12]
							  	 @ the baud rate register

	@ we want to set a few things here, lets define their bit positions to make it more readable
	LDR R0, =UART @ the base address for the register to set up the specified UART
 800020c:	4874      	ldr	r0, [pc, #464]	; (80003e0 <End_Program+0xa>)
	LDR R1, [R0, #USART_CR1] @ load the original value from the enable register
 800020e:	6801      	ldr	r1, [r0, #0]
	ORR R1, 1 << UART_TE | 1 << UART_RE | 1 << UART_UE @ make a bit mask with a '1' for the bits to enable,
 8000210:	f041 010d 	orr.w	r1, r1, #13
													   @ apply the bit mask to the previous values of the enable register

	STR R1, [R0, #USART_CR1] @ store the modified enable register values back to RCC
 8000214:	6001      	str	r1, [r0, #0]

	BX LR @ return
 8000216:	4770      	bx	lr

08000218 <change_clock_speed>:

@ set the PLL (clocks are described in page 125 of the large manual)
change_clock_speed:
@ step 1, set clock to HSE (the external clock)
	@ enable HSE (and wait for complete)
	LDR R0, =RCC @ the base address for the register to turn clocks on/off
 8000218:	486f      	ldr	r0, [pc, #444]	; (80003d8 <End_Program+0x2>)
	LDR R1, [R0, #RCC_CR] @ load the original value from the enable register
 800021a:	6801      	ldr	r1, [r0, #0]
	LDR R2, =1 << HSEBYP | 1 << HSEON @ make a bit mask with a '1' in the 0th bit position
 800021c:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
	ORR R1, R2 @ apply the bit mask to the previous values of the enable register
 8000220:	ea41 0102 	orr.w	r1, r1, r2
	STR R1, [R0, #RCC_CR] @ store the modified enable register values back to RCC
 8000224:	6001      	str	r1, [r0, #0]

08000226 <wait_for_HSERDY>:

	@ wait for the changes to be completed
wait_for_HSERDY:
	LDR R1, [R0, #RCC_CR] @ load the original value from the enable register
 8000226:	6801      	ldr	r1, [r0, #0]
	TST R1, 1 << HSERDY @ Test the HSERDY bit (check if it is 1)
 8000228:	f411 3f00 	tst.w	r1, #131072	; 0x20000
	BEQ wait_for_HSERDY
 800022c:	d0fb      	beq.n	8000226 <wait_for_HSERDY>

@ step 2, now the clock is HSE, we are allowed to switch to PLL
	@ clock is set to External clock (external crystal) - 8MHz, can enable the PLL now
	LDR R1, [R0, #RCC_CFGR] @ load the original value from the enable register
 800022e:	6841      	ldr	r1, [r0, #4]
	LDR R2, =1 << 20 | 1 << PLLSRC | 1 << 22 @ the last term is for the USB prescaler to be 1
 8000230:	f44f 02a2 	mov.w	r2, #5308416	; 0x510000
	ORR R1, R2  @ set PLLSRC (use PLL) and PLLMUL to 0100 - bit 20 is 1 (set speed as 6x faster)
 8000234:	ea41 0102 	orr.w	r1, r1, r2
				@ see page 140 of the large manual for options
				@ NOTE: cannot go faster than 72MHz)
	STR R1, [R0, #RCC_CFGR] @ store the modified enable register values back to RCC
 8000238:	6041      	str	r1, [r0, #4]

	@ enable PLL (and wait for complete)
	LDR R0, =RCC @ the base address for the register to turn clocks on/off
 800023a:	4867      	ldr	r0, [pc, #412]	; (80003d8 <End_Program+0x2>)
	LDR R1, [R0, #RCC_CR] @ load the original value from the enable register
 800023c:	6801      	ldr	r1, [r0, #0]
	ORR R1, 1 << PLLON @ apply the bit mask to turn on the PLL
 800023e:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
	STR R1, [R0, #RCC_CR] @ store the modified enable register values back to RCC
 8000242:	6001      	str	r1, [r0, #0]

08000244 <wait_for_PLLRDY>:

wait_for_PLLRDY:
	LDR R1, [R0, #RCC_CR] @ load the original value from the enable register
 8000244:	6801      	ldr	r1, [r0, #0]
	TST R1, 1 << PLLRDY @ Test the HSERDY bit (check if it is 1)
 8000246:	f011 7f00 	tst.w	r1, #33554432	; 0x2000000
	BEQ wait_for_PLLRDY
 800024a:	d0fb      	beq.n	8000244 <wait_for_PLLRDY>

@ step 3, PLL is ready, switch over the system clock to PLL
	LDR R0, =RCC  @ load the address of the RCC address boundary (for enabling the IO clock)
 800024c:	4862      	ldr	r0, [pc, #392]	; (80003d8 <End_Program+0x2>)
	LDR R1, [R0, #RCC_CFGR]  @ load the current value of the peripheral clock registers
 800024e:	6841      	ldr	r1, [r0, #4]
	MOV R2, 1 << 10 | 1 << 1  @ some more settings - bit 1 (SW = 10)  - PLL set as system clock
 8000250:	f240 4202 	movw	r2, #1026	; 0x402
									   @ bit 10 (HCLK=100) divided by 2 (clock is faster, need to prescale for peripherals)
	ORR R1, R2	@ Set the values of these two clocks (turn them on)
 8000254:	ea41 0102 	orr.w	r1, r1, r2
	STR R1, [R0, #RCC_CFGR]  @ store the modified register back to the submodule
 8000258:	6041      	str	r1, [r0, #4]

	LDR R1, [R0, #RCC_CFGR]  @ load the current value of the peripheral clock registers
 800025a:	6841      	ldr	r1, [r0, #4]
	ORR R1, 1 << USBPRE	@ Set the USB prescaler (when PLL is on for the USB)
 800025c:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
	STR R1, [R0, #RCC_CFGR]  @ store the modified register back to the submodule
 8000260:	6041      	str	r1, [r0, #4]

	BX LR @ return
 8000262:	4770      	bx	lr

08000264 <initialise_power>:

@ initialise the power systems on the microcontroller
@ PWREN (enable power to the clock), SYSCFGEN system clock enable
initialise_power:

	LDR R0, =RCC @ the base address for the register to turn clocks on/off
 8000264:	485c      	ldr	r0, [pc, #368]	; (80003d8 <End_Program+0x2>)

	@ enable clock power in APB1ENR
	LDR R1, [R0, #APB1ENR]
 8000266:	69c1      	ldr	r1, [r0, #28]
	ORR R1, 1 << PWREN @ apply the bit mask for power enable
 8000268:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
	STR R1, [R0, #APB1ENR]
 800026c:	61c1      	str	r1, [r0, #28]

	@ enable clock config in APB2ENR
	LDR R1, [R0, #APB2ENR]
 800026e:	6981      	ldr	r1, [r0, #24]
	ORR R1, 1 << SYSCFGEN @ apply the bit mask to allow clock configuration
 8000270:	f041 0101 	orr.w	r1, r1, #1
	STR R1, [R0, #APB2ENR]
 8000274:	6181      	str	r1, [r0, #24]

	BX LR @ return
 8000276:	4770      	bx	lr

08000278 <initialise_discovery_board>:

initialise_discovery_board:
	LDR R0, =GPIOE 	@ load the address of the GPIOE register into R0
 8000278:	485a      	ldr	r0, [pc, #360]	; (80003e4 <End_Program+0xe>)
	LDR R1, =0x5555  @ load the binary value of 01 (OUTPUT) for each port in the upper two bytes
 800027a:	f245 5155 	movw	r1, #21845	; 0x5555
					 @ as 0x5555 = 01010101 01010101
	STRH R1, [R0, GPIO_MODER + 2]   @ store the new register values in the top half word representing
 800027e:	8041      	strh	r1, [r0, #2]
								@ the MODER settings for pe8-15
	BX LR @ return from function call
 8000280:	4770      	bx	lr

08000282 <value>:
 8000282:	b3ff      	.short	0xb3ff
 8000284:	04c4      	.short	0x04c4

08000286 <delay>:
.equ TIM2_ARR, 0x4000002C        // Timer auto-reload register address
.equ TIM2_SR, 0x40000010         // Timer status register address
value: .word 79999999

delay:
    PUSH {LR}             // Save link register
 8000286:	b500      	push	{lr}

    // Enable clock for Timer 2
    LDR R0, =RCC_APB1ENR
 8000288:	4857      	ldr	r0, [pc, #348]	; (80003e8 <End_Program+0x12>)
    LDR R1, [R0]
 800028a:	6801      	ldr	r1, [r0, #0]
    ORR R1, R1, #(1 << 0)  // Set bit 0 to enable TIM2 clock
 800028c:	f041 0101 	orr.w	r1, r1, #1
    STR R1, [R0]
 8000290:	6001      	str	r1, [r0, #0]

    // Configure Timer 2
    LDR R0, =TIM2_CR1      // Load address of TIM2_CR1
 8000292:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    MOV R1, #0             // Clear all bits
 8000296:	f04f 0100 	mov.w	r1, #0
    STR R1, [R0]           // Store back to CR1
 800029a:	6001      	str	r1, [r0, #0]

    // Set prescaler for desired clock frequency
    LDR R0, =TIM2_PSC
 800029c:	4853      	ldr	r0, [pc, #332]	; (80003ec <End_Program+0x16>)
    //For 500ms second
    LDR R1, =3999            // Setting the Prescaler, remeber that at zero, default is 1.
 800029e:	f640 719f 	movw	r1, #3999	; 0xf9f
    //LDR R1, #799999999
    //For 0.1ms or 100 microseconds the prescaler will be 79,999,999
    //LDR R3, #value
    //LDR R1, [R3]

    STR R1, [R0]
 80002a2:	6001      	str	r1, [r0, #0]

    // Calculate the ARR value for the desired delay time
    LDR R0, =TIM2_ARR
 80002a4:	4852      	ldr	r0, [pc, #328]	; (80003f0 <End_Program+0x1a>)
    MOV R1, #1000        // Setting the Frequency Counter at 1000
 80002a6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    STR R1, [R0]
 80002aa:	6001      	str	r1, [r0, #0]

    // Enable Timer 2
    LDR R0, =TIM2_CR1
 80002ac:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    MOV R1, #(1 << 0)      // Set bit 0 (CEN) to enable the timer
 80002b0:	f04f 0101 	mov.w	r1, #1
    STR R1, [R0]
 80002b4:	6001      	str	r1, [r0, #0]

080002b6 <delay_loop>:

delay_loop:
    // Wait until the timer reaches zero (UIF flag is set)
    LDR R0, =TIM2_SR       // Load the status register
 80002b6:	484f      	ldr	r0, [pc, #316]	; (80003f4 <End_Program+0x1e>)
    LDR R1, [R0]
 80002b8:	6801      	ldr	r1, [r0, #0]
    TST R1, #(1 << 0)      // Check the UIF (Update Interrupt Flag) bit
 80002ba:	f011 0f01 	tst.w	r1, #1
    BEQ delay_loop         // If the UIF bit is not set, keep looping
 80002be:	d0fa      	beq.n	80002b6 <delay_loop>

    // Clear the UIF bit by writing 0 to it
    LDR R0, =TIM2_SR
 80002c0:	484c      	ldr	r0, [pc, #304]	; (80003f4 <End_Program+0x1e>)
    MOV R1, #0             // Clear the UIF bit
 80002c2:	f04f 0100 	mov.w	r1, #0
    STR R1, [R0]
 80002c6:	6001      	str	r1, [r0, #0]

    POP {PC}               // Return from function
 80002c8:	bd00      	pop	{pc}

080002ca <main>:

.text
.global main

main:
	BL initialise_power
 80002ca:	f7ff ffcb 	bl	8000264 <initialise_power>
	BL enable_peripheral_clocks
 80002ce:	f7ff ff81 	bl	80001d4 <enable_peripheral_clocks>
	BL enable_uart
 80002d2:	f7ff ff85 	bl	80001e0 <enable_uart>
    BL initialise_discovery_board
 80002d6:	f7ff ffcf 	bl	8000278 <initialise_discovery_board>

	@ To read in data, we need to use a memory buffer to store the incoming bytes
	@ Get pointers to the buffer and counter memory areas
	LDR R6, =incoming_buffer
 80002da:	4e47      	ldr	r6, [pc, #284]	; (80003f8 <End_Program+0x22>)
	LDR R7, =incoming_counter
 80002dc:	4f47      	ldr	r7, [pc, #284]	; (80003fc <End_Program+0x26>)

	@ dereference the memory for the maximum buffer size, store it in R7
	LDRB R7, [R7]
 80002de:	783f      	ldrb	r7, [r7, #0]

	@ Keep a pointer that counts how many bytes have been received
	MOV R8, #0x00
 80002e0:	f04f 0800 	mov.w	r8, #0

	BL Decoding // This Branches to the Decoding File Which Decodes the String Received from the Receive function
 80002e4:	f000 f801 	bl	80002ea <Decoding>
	@B Recieving
	B Counting_Letters
 80002e8:	e042      	b.n	8000370 <Counting_Letters>

080002ea <Decoding>:
	@B Recieving

Decoding:

    // Initialize variables
    LDR R1, =inputstring   // Load address of the input string
 80002ea:	4945      	ldr	r1, [pc, #276]	; (8000400 <End_Program+0x2a>)
    LDR R2, =outputString  // Load address of the output string
 80002ec:	4a45      	ldr	r2, [pc, #276]	; (8000404 <End_Program+0x2e>)
	LDR R3, =encoded_alphabet // Load address of the encoded_alphabet
 80002ee:	4b46      	ldr	r3, [pc, #280]	; (8000408 <End_Program+0x32>)
	LDR R4, =decoded_alphabet // Load address of the decoded_alphabet
 80002f0:	4c46      	ldr	r4, [pc, #280]	; (800040c <End_Program+0x36>)

080002f2 <loop>:
loop:
    LDRB R5, [R1], #1      // Load byte from input string, increment pointer
 80002f2:	f811 5b01 	ldrb.w	r5, [r1], #1
    CMP R5, #0             // Check for null terminator
 80002f6:	2d00      	cmp	r5, #0
    BEQ End_Of_Cipher             // If null terminator found, end loop
 80002f8:	d036      	beq.n	8000368 <End_Of_Cipher>

	CMP R5, #ASCII_UPPERCASE_A // Check if character is uppercase
 80002fa:	2d41      	cmp	r5, #65	; 0x41
    BLT Store_Char // Not uppercase
 80002fc:	db31      	blt.n	8000362 <Store_Char>
    CMP R5, #ASCII_UPPERCASE_Z //check if character is within bound of Uppercase
 80002fe:	2d5a      	cmp	r5, #90	; 0x5a
    BGT Check_Lowercase// check for lowercase
 8000300:	dc10      	bgt.n	8000324 <Check_Lowercase>


   	B Decode
 8000302:	e7ff      	b.n	8000304 <Decode>

08000304 <Decode>:

Decode:
	LDR R7, =0
 8000304:	f04f 0700 	mov.w	r7, #0
	MOV R8, R5
 8000308:	46a8      	mov	r8, r5

0800030a <Decode_Loop>:
Decode_Loop:
	LDRB R9, [R4, R7]
 800030a:	f814 9007 	ldrb.w	r9, [r4, r7]
	CMP R8, R9
 800030e:	45c8      	cmp	r8, r9
	BEQ Decode_Code
 8000310:	d004      	beq.n	800031c <Decode_Code>
	ADD R7, R7, #1
 8000312:	f107 0701 	add.w	r7, r7, #1
	CMP R7, #26
 8000316:	2f1a      	cmp	r7, #26
	BNE Decode_Loop
 8000318:	d1f7      	bne.n	800030a <Decode_Loop>
	B Store_Char
 800031a:	e022      	b.n	8000362 <Store_Char>

0800031c <Decode_Code>:

Decode_Code:
	ADD R5, R3, R7
 800031c:	eb03 0507 	add.w	r5, r3, r7
	LDRB R5, [R5]
 8000320:	782d      	ldrb	r5, [r5, #0]
	B Store_Char
 8000322:	e01e      	b.n	8000362 <Store_Char>

08000324 <Check_Lowercase>:


Check_Lowercase:
    CMP R5, #ASCII_LOWERCASE_A // Check if character is lowercase
 8000324:	2d61      	cmp	r5, #97	; 0x61
    BLT Store_Char
 8000326:	db1c      	blt.n	8000362 <Store_Char>
    CMP R5, #ASCII_LOWERCASE_Z
 8000328:	2d7a      	cmp	r5, #122	; 0x7a
    BGT Store_Char
 800032a:	dc1a      	bgt.n	8000362 <Store_Char>

   	B Decode_L
 800032c:	e005      	b.n	800033a <Decode_L>

0800032e <Code_Found_L>:


Code_Found_L:
    ADD R5, R4, R7
 800032e:	eb04 0507 	add.w	r5, r4, r7
    LDRB R5, [R5]
 8000332:	782d      	ldrb	r5, [r5, #0]
     ADD R5, R5, #32        // Load the decoded character
 8000334:	f105 0520 	add.w	r5, r5, #32
    B Store_Char         // Store the decoded character and continue
 8000338:	e013      	b.n	8000362 <Store_Char>

0800033a <Decode_L>:

Decode_L:
    LDR R7, =0
 800033a:	f04f 0700 	mov.w	r7, #0
    MOV R8, R5
 800033e:	46a8      	mov	r8, r5
    SUB R8, R8, #32
 8000340:	f1a8 0820 	sub.w	r8, r8, #32

08000344 <Decode_Loop_L>:
Decode_Loop_L:
    LDRB R9, [R4, R7]
 8000344:	f814 9007 	ldrb.w	r9, [r4, r7]
    CMP R8, R9
 8000348:	45c8      	cmp	r8, r9
    BEQ Decode_Code_L
 800034a:	d004      	beq.n	8000356 <Decode_Code_L>
    ADD R7, R7, #1
 800034c:	f107 0701 	add.w	r7, r7, #1
    CMP R7, #25
 8000350:	2f19      	cmp	r7, #25
    BNE Decode_Loop_L
 8000352:	d1f7      	bne.n	8000344 <Decode_Loop_L>
    B Store_Char
 8000354:	e005      	b.n	8000362 <Store_Char>

08000356 <Decode_Code_L>:

Decode_Code_L:
    ADD R5, R3, R7
 8000356:	eb03 0507 	add.w	r5, r3, r7
    LDRB R5, [R5]
 800035a:	782d      	ldrb	r5, [r5, #0]
    ADD R5, R5, #32
 800035c:	f105 0520 	add.w	r5, r5, #32
    B Store_Char
 8000360:	e7ff      	b.n	8000362 <Store_Char>

08000362 <Store_Char>:


Store_Char:
	STRB R5, [R2], #1      // Store byte into output string and increments pointer
 8000362:	f802 5b01 	strb.w	r5, [r2], #1
    B loop                 // Repeating the overall loop
 8000366:	e7c4      	b.n	80002f2 <loop>

08000368 <End_Of_Cipher>:

End_Of_Cipher:
    MOV R2, #0             // Null terminate output string to end the program
 8000368:	f04f 0200 	mov.w	r2, #0
    STRB R2, [R1]
 800036c:	700a      	strb	r2, [r1, #0]

	@ R2 has the decoded string for the program

	BX LR
 800036e:	4770      	bx	lr

08000370 <Counting_Letters>:

Counting_Letters:

    MOV R4, #0              // Load LED pattern into a register
 8000370:	f04f 0400 	mov.w	r4, #0
    LDRB R5, =0b00000001
 8000374:	f04f 0501 	mov.w	r5, #1

    MOV R9, #ASCII_LOWERCASE_A // will be the comparison register
 8000378:	f04f 0961 	mov.w	r9, #97	; 0x61
	LDR R2, =outputString
 800037c:	4a21      	ldr	r2, [pc, #132]	; (8000404 <End_Program+0x2e>)
	LDR R6, =string_length
 800037e:	4e24      	ldr	r6, [pc, #144]	; (8000410 <End_Program+0x3a>)
	MOV R12, #0
 8000380:	f04f 0c00 	mov.w	ip, #0
	MOV R11, #0
 8000384:	f04f 0b00 	mov.w	fp, #0
    B Counting_Loop
 8000388:	e7ff      	b.n	800038a <Counting_Loop>

0800038a <Counting_Loop>:


Counting_Loop:
	ADD R12, R12, #1 @keeping track of word length
 800038a:	f10c 0c01 	add.w	ip, ip, #1
	CMP R11, R5
 800038e:	45ab      	cmp	fp, r5
	BEQ End_Program
 8000390:	d021      	beq.n	80003d6 <End_Program>
	LDRB R8, [R2], #1
 8000392:	f812 8b01 	ldrb.w	r8, [r2], #1
	CMP R8, #0             // Check for null terminator
 8000396:	f1b8 0f00 	cmp.w	r8, #0
    BEQ End_Of_Word              // If null terminator found, end loop
 800039a:	d007      	beq.n	80003ac <End_Of_Word>

	CMP R8, R9
 800039c:	45c8      	cmp	r8, r9
	BEQ LED_Counter
 800039e:	d000      	beq.n	80003a2 <LED_Counter>

    B Counting_Loop
 80003a0:	e7f3      	b.n	800038a <Counting_Loop>

080003a2 <LED_Counter>:

LED_Counter:
	ORR R4, R4, R5 // Set the LED pattern
 80003a2:	ea44 0405 	orr.w	r4, r4, r5
    LSL R5, R5, #0x01
 80003a6:	ea4f 0545 	mov.w	r5, r5, lsl #1
    B Counting_Loop
 80003aa:	e7ee      	b.n	800038a <Counting_Loop>

080003ac <End_Of_Word>:


End_Of_Word:
	ADD R11, R11, #1
 80003ac:	f10b 0b01 	add.w	fp, fp, #1
	STRB R4, [R0, #ODR + 1]     // Save the LED pattern
 80003b0:	7544      	strb	r4, [r0, #21]
	BL delay
 80003b2:	f7ff ff68 	bl	8000286 <delay>
	CMP R9, #ASCII_LOWERCASE_Z
 80003b6:	f1b9 0f7a 	cmp.w	r9, #122	; 0x7a
	BEQ End_Program
 80003ba:	d00c      	beq.n	80003d6 <End_Program>
    MOV R9, #ASCII_LOWERCASE_A + 1 //
 80003bc:	f04f 0962 	mov.w	r9, #98	; 0x62
    LDRB R5, =0b00000001 // reset comparison bit
 80003c0:	f04f 0501 	mov.w	r5, #1
    SUB R2, R2, R12
 80003c4:	eba2 020c 	sub.w	r2, r2, ip
    LDRB R4, =0b00000000
 80003c8:	f04f 0400 	mov.w	r4, #0
    B Reset
 80003cc:	e7ff      	b.n	80003ce <Reset>

080003ce <Reset>:
Reset:
	STRB R4, [R0, #ODR + 1]
 80003ce:	7544      	strb	r4, [r0, #21]
	BL delay
 80003d0:	f7ff ff59 	bl	8000286 <delay>
    B Counting_Loop
 80003d4:	e7d9      	b.n	800038a <Counting_Loop>

080003d6 <End_Program>:


End_Program:

	B .
 80003d6:	e7fe      	b.n	80003d6 <End_Program>
	LDR R0, =RCC
 80003d8:	40021000 	.word	0x40021000
	LDR R0, =GPIOC
 80003dc:	48000800 	.word	0x48000800
	LDR R0, =UART @ the base address for the register to turn clocks on/off
 80003e0:	40013800 	.word	0x40013800
	LDR R0, =GPIOE 	@ load the address of the GPIOE register into R0
 80003e4:	48001000 	.word	0x48001000
    LDR R0, =RCC_APB1ENR
 80003e8:	4002101c 	.word	0x4002101c
    LDR R0, =TIM2_PSC
 80003ec:	40000028 	.word	0x40000028
    LDR R0, =TIM2_ARR
 80003f0:	4000002c 	.word	0x4000002c
    LDR R0, =TIM2_SR       // Load the status register
 80003f4:	40000010 	.word	0x40000010
	LDR R6, =incoming_buffer
 80003f8:	2000005c 	.word	0x2000005c
	LDR R7, =incoming_counter
 80003fc:	2000009a 	.word	0x2000009a
    LDR R1, =inputstring   // Load address of the input string
 8000400:	20000000 	.word	0x20000000
    LDR R2, =outputString  // Load address of the output string
 8000404:	20000005 	.word	0x20000005
	LDR R3, =encoded_alphabet // Load address of the encoded_alphabet
 8000408:	20000025 	.word	0x20000025
	LDR R4, =decoded_alphabet // Load address of the decoded_alphabet
 800040c:	2000003f 	.word	0x2000003f
	LDR R6, =string_length
 8000410:	20000058 	.word	0x20000058

08000414 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000414:	480d      	ldr	r0, [pc, #52]	; (800044c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000416:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000418:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800041c:	480c      	ldr	r0, [pc, #48]	; (8000450 <LoopForever+0x6>)
  ldr r1, =_edata
 800041e:	490d      	ldr	r1, [pc, #52]	; (8000454 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000420:	4a0d      	ldr	r2, [pc, #52]	; (8000458 <LoopForever+0xe>)
  movs r3, #0
 8000422:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000424:	e002      	b.n	800042c <LoopCopyDataInit>

08000426 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000426:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000428:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800042a:	3304      	adds	r3, #4

0800042c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800042c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800042e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000430:	d3f9      	bcc.n	8000426 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000432:	4a0a      	ldr	r2, [pc, #40]	; (800045c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000434:	4c0a      	ldr	r4, [pc, #40]	; (8000460 <LoopForever+0x16>)
  movs r3, #0
 8000436:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000438:	e001      	b.n	800043e <LoopFillZerobss>

0800043a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800043a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800043c:	3204      	adds	r2, #4

0800043e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800043e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000440:	d3fb      	bcc.n	800043a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000442:	f000 f811 	bl	8000468 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000446:	f7ff ff40 	bl	80002ca <main>

0800044a <LoopForever>:

LoopForever:
  b LoopForever
 800044a:	e7fe      	b.n	800044a <LoopForever>
  ldr   r0, =_estack
 800044c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000450:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000454:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8000458:	080004d0 	.word	0x080004d0
  ldr r2, =_sbss
 800045c:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8000460:	200000b8 	.word	0x200000b8

08000464 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000464:	e7fe      	b.n	8000464 <ADC1_2_IRQHandler>
	...

08000468 <__libc_init_array>:
 8000468:	b570      	push	{r4, r5, r6, lr}
 800046a:	4d0d      	ldr	r5, [pc, #52]	; (80004a0 <__libc_init_array+0x38>)
 800046c:	4c0d      	ldr	r4, [pc, #52]	; (80004a4 <__libc_init_array+0x3c>)
 800046e:	1b64      	subs	r4, r4, r5
 8000470:	10a4      	asrs	r4, r4, #2
 8000472:	2600      	movs	r6, #0
 8000474:	42a6      	cmp	r6, r4
 8000476:	d109      	bne.n	800048c <__libc_init_array+0x24>
 8000478:	4d0b      	ldr	r5, [pc, #44]	; (80004a8 <__libc_init_array+0x40>)
 800047a:	4c0c      	ldr	r4, [pc, #48]	; (80004ac <__libc_init_array+0x44>)
 800047c:	f000 f818 	bl	80004b0 <_init>
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	10a4      	asrs	r4, r4, #2
 8000484:	2600      	movs	r6, #0
 8000486:	42a6      	cmp	r6, r4
 8000488:	d105      	bne.n	8000496 <__libc_init_array+0x2e>
 800048a:	bd70      	pop	{r4, r5, r6, pc}
 800048c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000490:	4798      	blx	r3
 8000492:	3601      	adds	r6, #1
 8000494:	e7ee      	b.n	8000474 <__libc_init_array+0xc>
 8000496:	f855 3b04 	ldr.w	r3, [r5], #4
 800049a:	4798      	blx	r3
 800049c:	3601      	adds	r6, #1
 800049e:	e7f2      	b.n	8000486 <__libc_init_array+0x1e>
 80004a0:	080004c8 	.word	0x080004c8
 80004a4:	080004c8 	.word	0x080004c8
 80004a8:	080004c8 	.word	0x080004c8
 80004ac:	080004cc 	.word	0x080004cc

080004b0 <_init>:
 80004b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004b2:	bf00      	nop
 80004b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004b6:	bc08      	pop	{r3}
 80004b8:	469e      	mov	lr, r3
 80004ba:	4770      	bx	lr

080004bc <_fini>:
 80004bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004be:	bf00      	nop
 80004c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004c2:	bc08      	pop	{r3}
 80004c4:	469e      	mov	lr, r3
 80004c6:	4770      	bx	lr
